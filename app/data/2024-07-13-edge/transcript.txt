 ¿Qué es LH Computing? Y cómo esta tecnología es interesante desde el punto de vista de desarrollo de software, ya sea desde backend, frontend o inclusive de bases de datos. Y cómo esto podría reducir la latencia creando aplicaciones más rápidas y también reduciendo costos, pues es precisamente lo que vamos a ver hoy. Así que empecemos. Para entender este concepto y realmente este concepto de LH, es bastante interesante y confuso a veces porque varias empresas lo están utilizando con diferentes significados. Pero si lo podríamos resumir en el hecho, el concepto que todos comparten o que yo he visto que todos comparten es procesar datos lo más cerca al usuario. Y precisamente cuando buscas acerca de LH, te encuentras con varios ejemplos de IoT y muchos de ellos utilizan un carro. Como ejemplo, estos carros que se conducen solos con inteligencia artificial. Y el problema o el ejemplo que nos ponen allí es, imagínate que tú estás en uno de esos automóviles que se conducen solos y necesitas estar asistiendo. Estás haciendo cómputos para ir calculando la ruta, ir viendo el tránsito con las cámaras que tiene, ver viendo qué peatones se van atravesando, etc. Para procesar todo esto, imagínate que él tiene que enviar eso a la nube, esperar que eso se procese y luego volver. Habrían como cierto tiempo de latencia y dependencia. Entonces lo que hacen este tipo de dispositivos es que todo se calcula on device. Es decir, todo ocurre ahí mismo en el computador, en el mismo automóvil y no tiene que ir a ningún lado. Eso es algo considerado Edge, porque es procesar los datos lo más cerca al usuario posible. Y en ese caso, el usuario, pues el que está conduciendo el automóvil, está dentro del automóvil y lo más cerca sería eso, que no salga el cómputo a ningún lado, sino realmente se procese lo más, lo más, lo más cerca. Lo más cerca realmente es el mismo dispositivo, en este caso el automóvil, y por eso lo utilizan mucho como ejemplo. Pero si lo llevamos a el concepto de la nube, el cómputo en la nube, Cloud Computing, ¿qué es el Edge Computing? Pues vamos a verlo. En Cloud Computing, o básicamente servicios que nosotros adquirimos en la nube, y eso incluye serverless, o sea, aplicaciones que son serverless, también incluyen este tipo de cómputo, y todos pues al final necesitan algo de cómputo para procesar datos. Pero nosotros normalmente tenemos algo como esto. Tenemos un usuario que normalmente se conecta a un servidor que está en un provider, en una región en específico. Estos servidores computan, hacen operaciones con algún lenguaje, Python, JavaScript. El que tú elijas. Y normalmente también se conectan a una base de datos. ¿Qué tenemos aquí? Tenemos proveedores interesantes y los más comunes como DigitalOcean, Unheroku, Google Cloud, Azure, Amazon, por ejemplo, para distribuir y crear allí nuestras aplicaciones que necesiten de este tipo de cómputo. Y es más, si solo me fijo, por ejemplo, en la nube de Cloud y examinamos realmente cuáles son las locaciones de todos los data centers que tiene Google Cloud, nos encontramos algo como esto. Y es más, vamos a verlo un poco más a detalle. Por ejemplo, si tú buscas Google Cloud Locations, vamos a encontrar todos los puntos en la red que hay de una red de Google Cloud. Por ejemplo, está este mapita. Entonces acá en el mapa podemos tener cuáles son los data centers que realmente son los que podrían soportar nuestra aplicación, así sea una serverless application o una aplicación con un contenedor corriendo en una región en específico. Vemos, por ejemplo, que en la red de Google Cloud, tenemos un mapa de Google Cloud. En Latinoamérica tenemos dos puntos, uno en Santiago de Chile y otro en Sao Paulo. Pero miremos, por ejemplo, el de Amazon. Si miramos Amazon Regions, vamos a ver cómo está él. Acá lo podemos ver como por país. Acá creo que hay un overview. Por acá, acá está. Acá podemos ver que ellos tienen un punto en Sao Paulo, que prontamente haya uno en México, y algunos puntos acá, en Estados Unidos. Por ejemplo, esto es muy importante. Si tú te fijas, básicamente, cuando tú distribuyes una aplicación, una API, una aplicación de frontend en ciertos casos, o serverless rendering, tú le debes colocar en qué región pertenece, en qué región vas a distribuir tu aplicación. Y fíjate que ahí es donde están este tipo de regiones. Por ejemplo, acá también vemos esas regiones. Y esto es interesante saberlo porque Cloud Computing, si bien distribuye todo su cómputo en una región en específico, pues hay que ver qué implica eso para nuestro usuario. Veámoslo un poquito más gráficamente. Aquí, por ejemplo, tenemos un mapa de Google Cloud. Aquí, por ejemplo, tengo el mapa de la red de cómputo de Google Cloud. Entonces, vamos a poner, digamos, una personita, un sticker. Vamos a ver, este era el que del usuario, que era el sticker del usuario, este. Listo. Entonces, acá lo voy a volver chiquito. Y supongamos, supongamos que nuestro usuario está aquí, en América Latina, en algún país de nuestra Latinoamérica. Listo. Entonces, ¿qué pasa con este usuario que está por aquí en la mitad? Puede ser Paraguay, puede ser Bolivia. Vamos a ver. Entonces, realmente, nosotros aplicamos el concepto del Edge. Significa que, ¿dónde podría computarse o hacer los procesos? ¿Hacer un query a la base de datos? ¿Hacer, subir archivos? Bueno, el proceso que por código queremos computar en Python, en JavaScript o PHP. ¿Dónde sería más cercano hacer ese proceso? Si nosotros aplicamos el concepto del Edge, pues básicamente el punto más cercano, por ejemplo, en este caso, sería Sao Paulo. Y el servidor que está en Sao Paulo, él va a hacer las operaciones que tenga. Y nos devuelve, ¿no? Entonces, sea crear un registro, sea calcular alguna variable, sea subir algún archivo. Si la base de datos también tiene una réplica aquí, ahí mismo, en el nodo de Sao Paulo, pues posiblemente hacer una query a la base de datos sea bastante interesante. Porque, pues, no tendría que ir a otro nodo a hacer como el query, porque la base de datos está ahí mismo. Y es muy interesante tenerlo en cuenta. Una cosa son como los clústeres, los puntos que hacen solo cómputo, que es básicamente, ¿no? Que es básicamente, ¿no? Que es básicamente, ¿no? Que es básicamente nuestras aplicaciones API o Backends que están hechas en Python, en JavaScript o en PHP, que hacen algo. Pero realmente, la mayoría de veces hacen consultas a una base de datos para, pues, poder hacer cosas. Y las bases de datos a veces también pueden estar distribuidos en otros puntos en esta misma infraestructura. Entonces, ¿qué pasa con este usuario? Entonces, si aplicamos el concepto del Edge, ya sabemos que iría a Sao Paulo. Pero realmente nosotros no tenemos a disposición todos estos puntos en la red de Amazon o de Google Cloud. Nosotros tenemos un subset, un como subconjunto de esos puntos en la red. ¿Por qué? Porque al final tú no distribuyes tu aplicación en toda la red, la distribuyes en una región. Y ahí es donde también está la clave. Realmente tu aplicación, por ejemplo, si la distribuyes y eliges la región de América, pues normalmente si tengas acceso como a los puntos de América, posiblemente al de Sao Paulo o de pronto solo a los de Estados Unidos. Pero ¿qué pasa si uno de tus usuarios está por acá? Pues básicamente, si tú tienes un usuario de Estados Unidos, pues, ¿qué pasa si uno de tus usuarios está por acá? Pues básicamente, si tú tienes un usuario de Estados Unidos, pues, ¿qué pasa si uno de tus usuarios está por acá? Y si tu aplicación solo está distribuida en la región de América, por ejemplo, pues a él sí le tocaría hacer el viaje hasta acá, el punto más cercano, digamos que sea este, este puntito de acá, creo que es el más cercano. Porque al final tú no tienes a disposición todos los nodos de la red, sino apenas la región en la cual hayas distribuido. Serían estos puntos de acá. Creo que hay unos puntos que engloban toda la región de América, entonces serían estos puntos de acá. Entonces realmente va y los opera hasta allá. Ahora, obviamente, si la mayoría de tus usuarios están aquí en Europa, por ejemplo, pues mejor sería distribuir tu aplicación en estos puntos de la red para que vaya aquí, los procese y devuelva. Es muy interesante tenerlo en cuenta y así es como funciona ahorita Cloud Computing. Y es interesante porque hablar del Edge Computing cambia el paradigma, cambia un poco ciertas reglas, que es lo que quiero que entendamos hoy en este video. Entonces ya entendemos que, bien, si tenemos bien, una nube como Google Cloud, Digital Ocean, Amazon, tenemos unos puntos en toda la red, en todo el mundo. Sin embargo, tenemos acceso a una subregión y siendo un poquito énfasis en Latinoamérica, por ejemplo, tenemos solo estos dos puntos. Si tenemos usuarios en esta región, en Latinoamérica, pues realmente los puntos más cercanos sería Santiago y Sao Pablo. Eso es muy importante tenerlo en cuenta. Y aquí es donde también hablamos de otro tipo de aplicaciones. Hablábamos de las aplicaciones que normalmente son muy importantes, pero también son muy importantes. Y aquí es donde también hablamos de otro tipo de aplicaciones. Hablábamos de las aplicaciones que normalmente son muy importantes, pero también son muy importantes. Y aquí es donde también hablamos de las aplicaciones que normalmente son muy importantes, pero también son muy importantes. practicality. ojalá meng a y entonces normalmente tiene mucha congruencia que a nosotros cuando he una aplicación sea serverless o una instancia elijamos una región y la base de datos también la pongamos en la misma región para que entonces el cómputo sea cercano y sea el mismo sería algo raro que los nodos de cómputo de código como tal estén en por ejemplo aquí en américa pero la base de datos esté por allá en la región de europa entonces igual le tocará hacer un salto hasta allá para traerse los datos entonces ahí hay que tener congruencia y ahí es donde entran los equipos de infraestructura a ver cómo nos ayudan yo no soy tampoco el más pro en arquitectura pero pero precisamente es un tema bastante interesante y el edge va a cambiar un poco esas reglas pero listo acá quiero hablar de otro tipo de servidores hay un tipo de servidor que si bien es un servidor no necesita computar cosas es simplemente servir archivos estáticos normalmente a estas redes de cómputo o a estas redes de nodos en la red que son los que se utilizan para hacer los datos son los que se utilizan para hacer los datos y es un tipo de servidor que se llama archivos y es un tipo de servidor que se llama archivos que son los que se utilizan para hacer los datos estos archivos no es como no necesitan procesar o computar cosas normalmente tienen muchos más puntos en la red y estos mismos proveedores como digital oishan heroku google cloud azure amazon tienen sus propios servicios para este tipo de servidores entonces qué tipos de servicios uno encuentra allí por ejemplo google tiene fiverr hosting que si tú distribuyes o almacenas archivos archivos html archivos javascript imágenes vídeos y los distribuyes allí en fiverr hosting ellos tienen muchos más puntos en la red muchos más puntos que los de cómputo porque no hay que computar cosas de por sí sólo hay que servir esos archivos distribuidos esos archivos en la red cloud fort y en una llamada cloud for pages newly fly y a amazon por ejemplo tiene cloud front que su cdn entonces cada uno de estos proveedores tiene un cdn y porque estoy hablando de los cdn porque precisamente los cdn también cumplen como con esta regla de leche que si nosotros no tenemos un hecho por ejemplo si tuviéramos un usuario que está solicitando sus imágenes sus archivos html para realizar la aplicación su archivo javascript para ejecutar algo pues normalmente si no tenemos ese archivo distribuido en un cdn en un content delivery network pues sería muy difícil el proceso y tendría varia latencia entonces sin un cdn por ejemplo y lo que ya tenemos es más la prisma hacer y vamosciemos que otro ejemplo 궁금 화 primero porque el cdn es la red de rendering vamos va a ver qué pasa entonces aquí bajamos el veterans que es un cdn de Wow internet que es una red deögner bisexual que es un cdn que funciona totalmente de Kubernetes que es el cdn de vista web y obviamente para las termina google cloud los cds también aquí pueden que se сравcen o también pueden que sean un return también ahí están las bases de datos vemos una red también interesante y esta es la red de CDN, es de Content Delivery Network y a comparación de la otra pues aquí tenemos muchos más puntos en la red, tenemos muchísimos más, literalmente tenemos drásticamente muchos más puntos porque precisamente un servidor que sólo distribuye archivos estáticos no se tiene que preocupar por ejecutar un cómputo, ejecutar código, ni conectarse a una base de datos sino sólo distribuir el archivo, tu imagen, tu archivo HTML, tu CSS y nada más, entonces si hacemos el mismo ejercicio, fíjate que esta es la red de cómputo y también esta es la red de CDN del mismo Google Cloud, entonces por ejemplo si utilizamos otra vez a nuestro usuario y supusiéramos, hagamos la suposición de que esos son los puntos en los cuales también puedo ejecutar cómputo, que no, no puedo ejecutar cómputo ahí porque es un CDN es un, sólo es un servidor de archivos estáticos, pero normalmente si tú tienes una aplicación que es una single page application, como una aplicación en Angular single page application, en Vue, casi las aplicaciones de Frontend tienen este patrón que sólo son archivos estáticos entonces yo puedo distribuir mi aplicación en un CDN y claro, entonces traer esos archivos, imágenes, pues ahora si tengo un punto más cercano, por ejemplo tengo este aquí, tengo este súper cerquita entonces este sería el edge como hey, es lo más cercano al usuario, sería este punto y de nuevo comparándolo con la red de de cómputo, en un CDN es mucho más grande, tiene muchos más puntos en la red, entonces ya entendimos que si tenemos una aplicación que sólo son archivos estáticos y normalmente esto se complementa, o sea, normalmente nosotros tenemos una aplicación que si nuestro usuario sube imágenes, videos pues normalmente lo subimos en un CDN para que se esté a disposición rápido pero el cómputo si lo pone, lo tenemos que procesar en otros lados, si ya vemos otra vez esta slide, pues vemos como los puntos de cómputo y los puntos de CDN son mucho más hasta en la América, vimos que hay muchísimos puntos para este tipo de contenido estático, ¿no? y entendemos cómo funciona, ahora sí toda esta introducción, toda toda esta teoría, espero no haberte aburrido con esta teoría, pero realmente aquí es donde entra lo interesante del video, ¿qué es edge computing? pues resulta que desde ya hace tiempito, empresas como Cloudflare, y vamos a hablar de otras han descubierto cómo ejecutar código, cómo computar y utilizar la red de CDN para hacer cómputo es decir, para correr aplicaciones de JavaScript y procesar cosas, y conectarse entonces normalmente ya no tendríamos esa red de pronto tan limitada de una nube tradicional sino que si ahora habilitamos ciertos runtimes dentro de esos CDN podríamos tener la posibilidad de utilizar un CDN también como un servidor de aplicaciones también como un servidor que pueda computar, procesar, hacer cálculos entonces imagínate que Google Cloud empiece a correr o habilitar este tipo de runtimes para correr JavaScript dentro de ese CDN, para correr Python dentro de ese CDN, ya no le tocaría hacer esos dos puntos chiquititos que teníamos solo de Santiago y de Sao Paulo, no, ya sé multiplican por un montón, porque realmente ya hay muchos puntos de CDN y ahora sí podríamos hacer lo que se conocería como ese edge computing, hacer cómputo en esa red de CDN, entonces imagínate tú, imagínate que precisamente eres este usuario y ya este punto recuerda que acá teníamos la red normal de cómputo y aquí la red de CDN pero que ahora en el CDN se puedan computar cosas entonces fíjate el montón de puntos que tiene, tiene un montón de puntos en el cual él podría rápidamente acá conectarse, ¿no? y una cosa muy interesante o una propuesta del edge computing, aparte de habilitar el CDN como una red de cómputo, es que una propuesta del CDN es que no importan las regiones o sea, nos olvidamos del concepto de regiones, es decir, no importa si tu usuario también está acá, él utiliza todos, todos los puntos disponibles, todos, todos los puntos, entonces no es como que ah, bueno, ok, si yo vuelvo y utilizo los CDNs solo de América pues mi usuario que está aquí entonces igual le toca ir hasta acá, no, aquí sí un edge computing te dice, mira realmente puedes utilizar todos, todos los puntos de la red no importa, y ahí va a estar una réplica de tu aplicación en la cual se puede computar hacer el cómputo y volver, ¿no? entonces si tu usuario está aquí, volvería a su punto más cercano que por si creo que el punto más cercano es este de acá, este de por acá, entonces volvería ahí, haría el cómputo y eso es lo que hace es reducir la latencia lo que va a hacer es precisamente que esa aplicación pues simplemente se ejecute más rápido y sería interesante que la base de datos también esté en ese mismo nodo, sería una réplica muy interesante muy difícil de lograr, vamos a ver que hacer este tipo de replicaciones en base de datos es mucho más difícil y sobre todo este punto, este nivel, imagínate una copia de la base de datos en cada uno de esos nodos en la red pero hablando técnicamente sería interesante que también haya una copia en ese mismo punto en donde precisamente el usuario estaba cerca, entonces casi que el cómputo y también la query de la base de datos va a salir extremadamente rápido, y ya, y eso es precisamente lo que es el edge computing es poder utilizar el CDN esa red tan grande y con muchos más nodos en la red para poder ejecutar código código en su mayoría javascript como que las primeras pruebas que se han hecho con el edge computing el edge computing podríamos como traducirlo a ejecutar cómputo o ejecutar código en la red de CDN en donde la red de CDN pues ya vimos que es mucho más grande, entonces precisamente podríamos calcular ejecutar, procesar cosas allí entonces en estas primeras etapas de edge computing realmente las primeras pruebas ya no son pruebas ya es algo más duro pero está más duro para javascript o typescript en su defecto si tú estás escribiendo código del lado del backend con typescript con javascript este tipo de arquitectura te puede interesar. trapat Cheerly todavía si están dando sus primeros pasos how para chapay Special Editors en otros lenguajes en pythonOS, rose, PHP todavía está como certificar tartasrietas cicl toplas experimental, pero en JavaScript si es algo que tú ya puedes ejecutar hoy y podrías utilizar hoy, ahora eso es el Edge Computing, ahora no quería dejar el video como hasta aquí, porque literalmente yo podría decir, esto es Edge Computing y ya es literalmente ejecutar cómputo, poder correr JavaScript del lado del servidor en la red de cdns, punto final, nos vemos, suscríbete, dale likes etcétera, pero quería ir un poco más allá, quería ver pero, ¿cómo es esto posible? ¿cómo es realmente posible que ahora podamos utilizar, porque antes no, que es lo que se ha venido trabajando ¿cómo técnicamente se puede utilizar la red de cdns para ejecutarlo? porque también es algo muy interesante del ecosistema, así que vamos por ello entonces, para entender cómo esto funciona hay que hablar de los Runtimes bien, un Runtime es como una pieza de código que nos habilita poder ejecutar código de algún lenguaje por ejemplo, Java utiliza la Java Virtual Machine para correr código, por ejemplo JavaScript, por ejemplo, al ser un lenguaje interpretado, al igual que Python normalmente necesita de un motor para correrlo, y por ejemplo, Chrome utiliza V8 y Node.js también utiliza V8 como motor para correr JavaScript, lo podemos ver en su página si yo miro aquí la página, podemos darnos cuenta, aquí la descripción directamente V8 es un Open Source es un Engine de alto performance de JavaScript y WebAssembly escrito en C++, que es utilizado por Chrome y por Node.js es decir, es la forma en la que por ejemplo, Chrome puede correr JavaScript y la mayoría de navegadores, aunque realmente hay otros motores, Mozilla utiliza otro motor creo que Apple tiene su propio motor, JavaScript Core, algo así para correr JavaScript, pero este es el de Google que es utilizado, ya sabemos, por Chrome y por Node.js, sin embargo han salido otros Runtimes muy interesantes, Boom.js es un nuevo Runtime de JavaScript Winter.js, Cloud for Work el Edge Runtime de Vercell es bastante interesante es parte de construir unos nuevos Runtimes y si por ejemplo miramos la descripción de cómo Vercell describe su Edge Runtime, vamos a ver esa descripción tan interesante porque de ahí vamos a tener un concepto clave visitemos un poquito la página del Edge Runtime de Vercell, entonces si nos vamos aquí a la página de Edge Runtime Vercell.app podemos ver aquí su descripción nos dice, mira, el Edge Runtime y esto yo creo que es la clave es un subset es un subconjunto, un conjunto pequeño de las APIs de Node.js con compatibilidad y interoperabilidad con múltiples otros Runtimes y de por sí aquí nos menciona algo muy interesante que luego te voy a mencionar, este Winter.cg porque dice que ha sido desarrollado en conjunto para ser compatible con esta red de empresas que están construyendo también sus propios Runtimes y acá nos menciona Vercell, Cloudflare, Dino, Shopify, etcétera entendiendo esos Runtimes precisamente y basándonos en la descripción que nos dio el Edge Runtime de Vercell vamos a ver cómo funcionan y pues viéndolo ellos lo describen como un subset de JavaScript que es diferente, por ejemplo TypeScript es un superset TypeScript es grande y como que JavaScript está chiquito al medio en este caso es al contrario JavaScript es el grande, en este caso vamos a utilizar Node.js como ejemplo Node.js es ese Runtime de JavaScript para correr JavaScript desde el lado del backend y Node.js como que le pone ciertas cosas, ciertas APIs para poder utilizar más cosas y correrlo desde el lado del backend pero aquí básicamente es un subset JavaScript o estos nuevos Runtimes son un conjunto pequeño digamos que un JavaScript un poco light y un poco limitado y un poco limitado en lo que se puede y lo que no se puede hacer pero sobre todo es muy poderoso y muy acotado ¿qué quiere decir esto? que no es que perdamos todas las ventajas de JavaScript de por si vamos a ver que vamos a a codear JavaScript como normalmente lo hacemos pero si de pronto no vamos a utilizar ciertas APIs de Node y tienen un Runtime un poco limitado entonces esto es una ventaja, ¿por qué? porque precisamente esto es una de las cosas que permite correr ehmm JavaScript en la red de CDNs como uno necesita de todo Node y de un poder de computo grande como una máquina que se prenda y luego ejecute tu computo si manejas una instancia pues va a estar siempre prendida si tienes un serverless pues se prende por un momentico un pedazo de computo y luego se apaga eh pero como que necesita de ese computo de una máquina que corra Node.js en este caso con estos Runtimes como son chiquitos y son tan ligeros pueden correr sin problema en un CDN no necesitan una red de computo tan compleja o con bastantes recursos sino que sus recursos son mucho más acotados mucho más pequeños tanto así que precisamente se pueden correr en la red de CDNs y utilizar esa red como una red de computo más y ahí es donde hablaríamos del Edge Computing ahora pasa algo muy similar como la guerra de los navegadores en algún momento cada una de estas compañías está como creando su propia red de computo y para no repetir esa guerra de no sé Mozilla estaba sacando una API que no era compatible con Internet Explorer o con Chrome y teníamos una guerra de JavaScript diferente en cada navegador casi desde el inicio estas empresas se han reunido se han hablado para crear como un consorcio un grupo que esté pendiente de que estas APIs sean interoperables en cada una de esas nubes pero en realidad no es así es que no es así es decir si no entonces tendríamos que mi aplicación solo funciona en la infraestructura de Vercel porque solo funciona en el Edge Runtime de Vercel o por ejemplo tenemos mi aplicación que es una API que es un CRUD o con operaciones que solo corre en la infraestructura de Cloudflare no tiene mucho sentido entonces se ha creado esta empresa bueno no es una empresa es una comunidad es un consorcio, es un grupo de empresas vigilar y estar pendiente de que todos estén construyendo un runtime que sea interoperable y que luego no sea, digamos que sea agnóstico y no se apegue a una infraestructura en específico. Allí es donde entonces está esta empresa, es lo que habíamos hablado, que no es una empresa de nuevo, es un consorcio, es un grupo, es una comunidad y estas empresas precisamente que son las que están creando sus propios runtimes son las que hacen parte de este grupo. Es más, si entramos a la página web vamos a decir que es una comunidad que apunta a pues como proveer un espacio para los JavaScript runtimes y colaborar en una API que sea interoperable. ¿Y quiénes están acá? Pues mirar que está Dino, está Node.js, está Berserker, Cloudflare. Algo que me parece muy raro es que aquí no estén las grandes empresas como Azure de Microsoft, como Google Cloud, como Amazon. Están es como estas que son las que están habilitando el runtime de las empresas. Y creando este nuevo tipo de servicio, el Edge Runtime o el Edge Computing. Parece que los proveedores ahorita de este tipo de cómputo solo es satisfecho por este tipo de compañías. Y ahí es donde luego hablaremos un poco de por qué Google Cloud no lo está haciendo, por qué Amazon de pronto sí. Vamos a ver unas cosas que Amazon está como investigando para apoyar esto. Pero por ahora las empresas que más están trabajando en esto son las que vemos aquí. Sin embargo, hay un problema. Hay un problema con el Edge. Y aquí te lo quiero de una vez como expresar para que lo tengas en cuenta si vas a probar esta tecnología. Como he hablado, el Edge o esos Runtimes que corren en este tipo de Edge son un subset de Node.js. Quiere decir que realmente no se soporta todo el poder que normalmente estamos acostumbrados en JavaScript del lado del servidor. Y quiere decir que ciertos frameworks o librerías no van a correr en el Edge. ¿Cómo? ¿Cuáles? Estos que están acá. Por ejemplo, frameworks como Express, que es como el framework más chiquito para correr back-end del lado del servidor para hacer APIs, no puede correr en el Edge porque Express utiliza muchas cosas de Node. Y entonces si yo quiero correr una aplicación que esté hecha en Express en el Edge Runtime de cualquiera de estos proveedores, Cloudflare, Berserker, Nelify, etc., no va a correr, no va a funcionar porque recordemos que no es Node.js, es un Runtime más limitado. Y tenemos otras cosas como Nest.js o Fastify. Ellos dependen. Mucho del ecosistema de Node.js. Y si tú tienes desarrollados aplicaciones en este tipo de frameworks, no vas a poder correr tus aplicaciones en el Edge. Socket.io o ORM es como Time.ORM, que se basa mucho también en varias cosas de Node para que funcione. Y a veces ni siquiera ellos mismos. Literalmente, pues ellos utilizan librerías de librerías y esta cadena de dependencias y que hace imposible que estas frameworks o librerías corran en el Edge porque dependen mucho de ciertos paquetes. De Node para funcionar. Entonces aquí es donde se está creando un ecosistema bastante interesante y están saliendo nuevas librerías, nuevos frameworks que sí están como ejecutadas sin depender de Node, sino en este JavaScript muy liviano para que tu aplicación pueda correr en el Edge o en un servidor de Node. Básicamente, si corre en el Edge, va a correr en el Node por defecto porque al final tú puedes correr solo que ahí estarías como desperdiciando recursos porque puedes correr en el Node. Y eso es lo que nos va a hacer. Y eso es lo que nos va a hacer. Y eso es lo que nos va a hacer. Entonces, pues una aplicación que está corriendo en el Edge podría correr en el CDN, pero tú la estás corriendo con Node.js. Funciona, no hay problema. Pero pues es parte de eso. Es parte de estas nuevas librerías que se están creando. Entonces, estas librerías que solo corren en este subset, por defecto van a correr también en Node si lo quisieras, pero la gran ventaja es correrlo pues en el Edge Computer, ¿no? Si no, ¿cómo para qué? Entonces tenemos estas frameworks como Hono, como Nitro o ORMs como Diesel que son nuevas propuestas para poder hacer un nuevo software. Para poder, sinceramente, acoplar este nuevo tipo de Runtimes y que puedan correr en Edge o en cualquier nube. Pero están creadas en este subset de JavaScript para poder ejecutarse. Y realmente yo, por ejemplo, ya he hecho APIs con Hono y no cambia mucho. Eso es una de las cosas más interesantes. De esas cosas interesantes es que al final estos frameworks como que esconden lo complicado, ¿no? Es al final la labor de un framework, hacerte la vida más sencilla. Entonces, de por sí, Hono se parece mucho a Springboard, pero es sencillo. Entonces tú escribes como tu JavaScript de toda la vida, el que siempre has hecho muy al estilo de Express, pero por dentro ese motor, ese framework, Hono, está corriendo en ese subset o está utilizando JavaScript como muy light, como muy plano para poder ejecutarse. No está utilizando herramientas de Node como lo haría Express. Pero lo divertido precisamente es que tú no te das cuenta de eso. Tú simplemente utilizas el framework, utilizas el JavaScript de toda la vida. De nuevo, posiblemente no puedas utilizar ciertas librerías, si tú quieres utilizar una librería que de pronto no es compatible o que utiliza cosas de Node, pues te tocaría buscar una alternativa, porque no van a correr en la leche. Pero casi que estos frameworks están brindando también esas alternativas. Hono.js para escribir APIs muy parecido a Express. Dice bueno, si tú querías utilizar esta API de Node, mira, te doy esta opción para que la puedas utilizar. Este tipo de cosas. Y echémosle una hoja a esas herramientas. Por ejemplo, veamos Hono. Dice Web Application Framework, dice rápido, liviano, construido en Node. Dice rápido, liviano, construido en Node. Dice rápido, liviano en씬ado e instらido en los Showroom. Para aquí lo básicamente te explico el regreso, cuando lo que habías hecho en speakersfun en un puesto en 10, era means wheels on life ya que aquí no le Merc там общественно. Way of Life es bueno para Routinesar, allá se abarte el tiempo al mismo tiempo y prepara esa patrimonialidad. Ahora esa banking que haces lágrimas cuesta un000, te apetece Palo de woods, a lo mejor unaconds WordPress 1M, como te voy a explicar más.... Acá es también un poco, o sea, obviamente cambian ciertas cositas, pero acá importas Hono, creas la aplicación, haces un get y ya, le haces por default y luego pues configuras el puerto, pero ese es el hola mundo, por ejemplo, de Hono. Y estás utilizando JavaScript, estás utilizando TypeScript, por defecto está habilitado con TypeScript y precisamente se venden como este tipo, ¿no? JavaScript Runtime, como soportado para cualquier JavaScript Runtime, ¿no? Ultraliviano. Bueno, varias de estas librerías están casi haciéndose desde cero para poder literalmente no tener dependencias de Node o no depender de varios paquetes de Node, entonces son bastante livianas. Veamos otro, por ejemplo, Nitro.js, este Nitro es interesante, este es también otro y otra vez nos dice crea servers con todo lo que tú necesitas y deployment donde tú prefieras, ¿no? Y si uno se va como a la parte de... Entonces acá está, ¿no? Los Edge Workers, puede correr en Runtimes como Node.js, como el de Boom, como el de Dino y acá ya hay providers como, no sé, lo puedes desplegar en la red de Edge Computer en de Cloudflare o como, de nuevo, como al final soporta, o sea, por defecto está hecho en ese subset, entonces también soportaría Node, pues también lo podrías desplegar en un servidor de DigitalOcean y ya, ¿no? Como en un servidor normal. De nuevo, yo creo que aquí estás... Desperdiciando la oportunidad porque si ya te das el trabajo de escribir tu aplicación en este tipo de nuevos frameworks, pues ya desplegarla en el Edge Computer, ¿para qué utilizar la red tradicional, no? La gracia es utilizar ese cómputo, ese CDN para que reduzcas la latencia. Y por ejemplo, está este Diesel, Diesel ORM, ¿no? Que sería nuestro reemplazo a ORMs tan típicos como Time ORM, ¿no? Entonces Time ORM es un framework basado en Node, etc. Para, pues, poder conectarse y mapear una base de datos y conectarse a esas queries, ¿no? Algo típico. Pues precisamente, Diesel ORM es uno de esos ORMs que está haciendo como de esas... De estos que están escritos, estos están escritos precisamente para correr en Edge. Acá otra vez, es súper liviano y está listo para Edge, ¿no? O sea, como que vamos a encontrar que en estas librerías hay este tipo como de venta, ¿no? El cero dependencias, quiere decir que literalmente ellos... No utilizan ninguna dependencia de Node, de NPM, por ejemplo, y la escribieron todo desde cero para que utilices ese JavaScript sin dependencias de nada y por ende también les permite, pues, correr en Edge, ¿no? Entonces vemos, por ejemplo, cómo se haría una consulta, veamos, cómo se haría una consulta. Documentación, acá. Por ejemplo, esta sería como una forma, luego de declarar tu base de datos, haces un select, pones la entity, que por acá está el esquema, entonces acá está tu esquema de tablas. Si ya estás acostumbrado, obviamente, a manejar un ORM como Django, ORM como Time, ORM, que normalmente define estos esquemas en los archivos y luego los empiezas a utilizar a través del ORM, entonces acá haces un left, join, word, etc., ¿no? En fin, estos son ese tipo de librerías nuevas que están saliendo para poder ejecutarse en este nuevo tipo de cómputo. De nuevo, ¿cuál es esa gran ventaja? Entonces, si hacemos una aplicación cotidiana basada en Node o en el runtime de Node. Y aún así es una serverless application, una serverless es esa que no necesitas preocuparte por infraestructura ni nada, simplemente la haces deployment, pero utiliza la infraestructura normal de cualquiera de estos providers. Entonces, si miramos aquí, vemos el tiempo. Esto es un hello world, literalmente como un hola mundo en Express, por ejemplo, ejecutándose en una red tradicional. Ese hello world corre en 282 milisegundos. Pero, por ejemplo... Esta aplicación, este otro hola mundo, pero ejecutado en el Edge, en la red de cómputo, en este caso están utilizando la red de cómputo de Vercel, el Edge de Vercel, corre en unos 67 milisegundos. Entonces, fíjense que la reducción de tiempo siempre es, te ahorras como la mitad de esa latencia. Que, de nuevo, son ciertos milisegundos, pero, de nuevo, la experiencia, acá estamos pensando en la experiencia del usuario, tu aplicación va a cargar más rápido la latencia. De cualquier cómputo va a ser más rápido porque está corriendo en el Edge Computing. Acá también quería especificar otra cosa, y es que frameworks como Angular, como Next, como Nux, que Next basado en React, Nux basado en Vue, Angular, Angular. Es interesante porque ellos ya no dependían de Node. Ellos siempre han sido como muy delicados estos frameworks de frontend porque al final ellos hacían mucho render o hacen mucho render utilizando el JavaScript que el navegador les da. Porque normalmente hay aplicaciones. Que se renderizan del lado del cliente. Entonces no podían utilizar APIs de Node. Entonces ellos ya estaban de por sí limitados a sólo utilizar un JavaScript como chiquito. Pero fíjate que ese JavaScript chiquito es súper poderoso. Tanto así que corre a una aplicación en Angular, corre a una aplicación en Next, corre a una aplicación en Nux. Y esas son aplicaciones que no son nada sencillas, son robustas. Pero ellos por defecto, por definición, no dependían de Node. Entonces podríamos correrlas en el Edge. Entonces. Si tú tienes una aplicación que hace server-side rendering, es decir, hace cómputo y necesita hacer cómputo desde el lado del servidor. Como hacer el rendering desde el lado del servidor. Entonces puedes correr este tipo de frameworks en el Edge runtime. Y quiere decir que tu página, tu aplicación va a renderizar mucho más rápido. Porque entonces al correrlas no en una nube tradicional como en un servidor de Node, en Heroku, en DigitalOcean, en Amazon. Si no lo corres en el Edge Computing de alguno de estos proveedores. En Cloudflare, Berserk, Nellify, etc. Pues el tiempo de latencia, el tiempo de render va a ser mucho más rápido. No solo por, no sé, las cosas que tú utilices del framework para que sea rápido. Sino por definición, por correr en el Edge va a tener menos latencia. Va a ser más rápida la aplicación. Y aquí debo mencionar a una de esas nubes que de por sí es la que más me ha gustado. Berserk tiene su propio Edge Runtime. Pero realmente me ha gustado bastante Cloudflare. Ya tengo unos videos. De Cloudflare seguramente hable un poquito más de Cloudflare. No estoy casado con Cloudflare. Solo me ha gustado esta nube. Me parece que tiene este tipo de cómputo, el Edge Runtime. Y me ha parecido interesante. Por ahí ya tengo un par de videos. Si tú quieres desplegar una Single-Plex Application. Es decir, una aplicación solo basada en archivos estáticos. Una SPA, una Single-Plex Application. De Angular. Pero también ya te enseñé en un video anterior. Cómo desplegar en Cloudflare una aplicación que haga server-side rendering. Y en esta ya utilizaríamos Edge Runtime. ¿Por qué? Pues precisamente estaríamos utilizando los nodos de esta red. Pero de nuevo, hay varios proveedores. Berserk, Cloudflare. Cloudflare me parece interesante porque tiene una... Creo que es uno de los que tiene uno de esos puntos de esos CDN más potentes. Vamos a verlo. Estos son los puntos de CDN, por ejemplo, de la red de Cloudflare. Entonces aquí vemos muchos, muchos, muchos más puntos de lo que veríamos, por ejemplo, en una red tradicional. De nuevo. En una red de CDN. Bien, entonces allí es donde estaría corriendo tu aplicación y no en las redes tradicionales. Es más, por acá tienes. Si quieres ser curioso, por acá están las redes. Qué puntos hay en Latinoamérica? Por ejemplo, por acá sé que hay uno en Medellín, en Colombia, pero también, por ejemplo, aquí hay uno en La Paz, en Perú. Entonces quiere decir que es la red de CDN. Entonces cuando tú distribuyes una aplicación utilizando el Edge de Cloudflare, realmente lo estás distribuyendo. Y una de las cosas muy interesantes es que aquí ya no te preocupas por esto de las regiones. Literalmente si lo estás y eso es una de las cosas que cambia, al menos en Cloudflare, que ellos ya no te dicen oye, ok, utiliza mi red de CDN, pero no, no para esta región. Ellos directamente te dicen que está disponible todos los puntos de la red. Y listo. Eso es básicamente este video de Edge Computing. Realmente quería hacer una explicación. No sé de cuánto salió el video, pero no quería solo quedarme como con los oficiales, quería darte una explicación un poco a fondo y por qué me parece muy interesante esta tecnología desde el lado del backend, desde el lado del frontend. Cómo funciona? Qué pasa con los otros lenguajes? Qué pasa con Python? Qué pasa con PHP? Se van a quedar afuera de este Edge Computing porque no pueden correr en un CDN. Necesitan una red de cómputo tradicional. Hay algunas exploraciones. Cloudflare está haciendo algunas exploraciones para correr Python. Ya de por sí lo lanzaron hace unos dos meses y lanzaron como unos primeros experimentos de cómo poder soportar Python y mostrar unas APIs que utilizan FAS API y cosas de ese tipo y que corren en el Edge Computing. Cómo lo logran? También lo logran con... No es que hagan un subset, así como con JavaScript hacen un subset de JavaScript o en este caso de Node hacen un subset de Node, un JavaScript mucho más light para correrlo. No, ahí están utilizando otra estrategia que es WebAssembly, pero creo que el video ya está mucho más largo de lo que espero. Entonces, si quieren, luego les puedo hacer un video de cómo correr Python en el Edge de Cloudflare, que es creo el que más ahorita tiene soporte para otros lenguajes. Sin embargo, ya con JavaScript sí hay mucho más camino más adelantado. Entonces puedes correr en el Edge de Vercell. No sé cuántos puntos tenga Vercell en su Edge. Por ahora, de nuevo, el Edge más completo que he visto es el de Cloudflare. Tiene muchos más puntos distribuidos en la red. Entonces, si despliegas tu aplicación ahí, va a estar distribuida en esa red. Puedes probar el de Vercell, el de Netlify, los que has visto que están ahí, el de Lambda, el de Amazon, el de Lambda Edge. A ver si la red de Cloudflare con esos puntos que te mencionaba, pues también te pueden servir. Así que déjame saber en los comentarios si sabías esa tecnología, si te parece interesante, si te parece que estamos complicando más la vida otra vez de recrear frameworks de backend para que ahora corran en el Edge. De nuevo, me parece algo muy interesante, cautivador, que ha traído como mi atención en estos últimos meses, en lo que he trabajado con Cloudflare. Pues, utilizando esa nube como provider, así que quería dejarte este video para materializar qué es el Edge Compile. Así que déjame un like, compártelo, compártelo a tu equipo de infra. Probablemente tu equipo de infra sepa más que yo, pero tal vez les interese para abrir la oportunidad y explorar más a fondo este tipo de arquitectura. Así que déjale ese comentario, comparte este video y nos vemos en la próxima. Gracias.