 En este video te voy a enseñar cómo migrar o llevar una aplicación desde la versión 16 de Angular hacia la más reciente que es la versión 17. Así que vamos a empezar a hacer esta migración. En la versión 17 de Angular tenemos muchas muchas novedades, pero para poder aprovechar todas esas ventajas necesitamos pues estar parados en esa versión y de eso se va a tratar este video, de llevar una aplicación que tengo que es bastante sencilla en la cual utiliza Angular Material, Angular en la versión 16 y llevarla a la 17 y a partir de allí empezar a usar todos los nuevos features que tiene incluida la versión 17, pero primero tenemos que hacer ese primer paso y ese primer paso precisamente es pues llevar todo hacia esta última versión, la 17 y vamos a llevarlo paso a paso y ver cómo se lanza pues a una aplicación en producción. La aplicación que vamos a usar es la siguiente. Esta es la aplicación clásica que siempre suelo utilizar para hacer migraciones. Entonces acá tenemos un login, tenemos una lista de productos en la cual yo puedo editar, cambiar el precio por ejemplo, lo doy a salvar y ahí ya está el nuevo precio, tiene una galería de imágenes, tiene filtros por categoría, etc. Es una aplicación bastante sencilla, también tiene categorías, usuarios, etc. Entonces vamos a llevar a cabo la migración de esta versión y ahorita está en este dominio. Entonces vamos a ver cómo sería esa actualización. Lo primero que te recomiendo es que situado en tu proyecto, en la rama principal o en la que estás en producción, pues ahí abras una nueva versión, puedes llamarla como quieras, pero lo mejor es trabajar esa actualización en una rama aparte por si algo sale mal, simplemente pues no dañamos el proyecto o la rama maestra y ahí es donde vamos a llevar esta actualización. En este momento este es mi proyecto el cual está parado precisamente en la versión 2016 y lo voy a llevar hacia la versión 17 de Angular. Y como ves es una aplicación que ya utiliza standalone components, es decir si yo voy por ejemplo a los productos, por acá tengo algunos componentes, pero todos, todos, todos son standalone. Entonces esto ya lo hicimos anteriormente, pues precisamente con el comando que se utiliza para hacer este tipo de migración. Te invito a que veas ese otro tipo de vídeo, pero aquí lo que tienes que tener en cuenta es que todos mis componentes ya son standalone. Entonces esa parte ya está a check, todos los componentes que tengo en esa aplicación ya son de este tipo. Y de por sí ya no hay ningún módulo como tal, si no utilicemos el routing ya sin necesidad de módulos, etcétera. Así que pues vamos a ver cuál es el primer paso para migrar esta aplicación. Lo primero es que en la versión 17 de Angular mínimo, el requerimiento mínimo de Node para que pueda correr una aplicación en Angular en la versión 17 tiene que ser de la 18 en adelante. En este momento estamos en Node 20, pero lo mínimo que pide la versión 17 es de la 18, recuerda la 18 en adelante. Así que asegúrate de trabajar con esa versión. Recuerda que si tienes varios tipos de proyectos en tu propia máquina, puedes utilizar algo como Node Version Manager que te permite hacer switch de la versión de Node. Entonces si estás trabajando con Angular 14, con Angular 16 y allí tienes una versión de Node inferior y lo quieres dejar ahí, pues puedes utilizar Node Version Manager. Precisamente aquí voy a utilizar la versión de Node 20 que está siendo gestionada por Node Version Manager. Así que veámoslo. Si yo le digo a mi Node Version Manager en qué versión estoy, precisamente qué versión es la que tengo y hago una lista de las versiones, precisamente la que tengo ahorita seleccionada es la 20, pero también podría moverme hacia la versión 18 y es más, podría tener aquí otro tipo de versiones y moverme entre estas versiones a petición, a como yo lo quiera. Entonces precisamente si yo le hago un Node menos B, pues me va a decir que yo tengo la versión 20 de Node. Recuerda que puedes funcionar con la 18 o 20 en adelante si quieres trabajar con la versión 17 de Angular. ¿Cómo instalas utilizando Node Version Manager una versión estable? Pues simplemente corres el comando Node Version Manager, Install y le dices que quiere la versión LTS, que es como la de más largo soporte y él te va a buscar en ese momento cuál es. Por ejemplo en este momento es la 20, me va a ahorrar este paso porque pues yo ya tengo la 20, pero si tú lo quieres hacer en tu máquina este es el comando. Seguido de eso tenemos que actualizar la versión de el CLI de Angular. Entonces para eso vas a instalar NPMI y vas a decirle que quieres la versión Angular CLI con una arroba le dices que quieres la versión más reciente, la lees y que se instale de forma global. Así que hagamos ese paso. Una vez actualizado el CLI lo que puedes hacer es hacer una ng-version. Lo puedes hacer de forma global, es decir, saliéndote básicamente la carpeta de tu proyecto, puedes hacer un ng-version y así miras la versión global. Entonces por ejemplo la versión global que tengo es la 17.0.9 con Node 20.10.0. Ahora si bien si vas a tu proyecto, por ejemplo yo voy a ir al proyecto pues de e-commerce, que es el administrador de un e-commerce, ahí está, y si ya lo haces localmente en tu proyecto y haces ng-version vas a encontrar que tienes una versión diferente de CLI que es la versión 16 y es más te dice que para esa versión Node 20, que es el que tienes localmente en tu computadora, dice que no lo soporta. Recuerda que cada versión localmente tiene su propia versión de Angular y de CLI. Por ejemplo en este proyecto el CLI local que sólo está para el proyecto está en la versión 16. Igual que Angular Core, Angular Forms, etc. Ahora otra cosa diferente es la versión global que tengo en la máquina que es así es la versión 17. Tienes que tener muy en cuenta esto porque pues básicamente estamos actualizando la versión global, eso fue lo que hicimos, actualizar la versión del CLI global que tenemos en la máquina y ahora con esa versión global podemos hacer una migración hacia la versión 17 de estos proyectos ya de forma local, llevar un proyecto que localmente tiene la versión 16 hacia la 17. Ya teniendo el CLI global en la versión 17, entonces vamos a actualizarlo. Lo primero que podríamos hacer es correr un ng-update y él mismo nos va a informar qué cosas deberíamos actualizar, qué cosas faltan por llevar a una siguiente versión. Precisamente él me dice mira, el ESLinit Schematics, el CDK, el CLI, el Core, el Angular Material, esto si ya lo está haciendo en forma particular, es decir en el alcance o en el scope del proyecto como tal. Entonces aquí me está diciendo mira tu proyecto está en estas versiones y deberías llevarlo ya hacia estas y pues este es el comando para que lo actualices. Ahora vamos a correr ese primer comando que sería en este caso nuestro ng-update y le vamos a decir que queremos hacia utilizar el Angular Core en la versión 17 y de paso el Angular CLI también llevarlo hacia la versión 17. Normalmente estos dos paquetes se actualizan así en en paquete, en conjunto y va a ser todas las actualizaciones necesarias. Veamos. Listo, entonces aquí por ejemplo yo trate de hacer la actualización pero hay un paquete que me está diciendo que es el Angular ESLint. Ese paquete lo que hace es correrme un como un check de buenas prácticas en Angular y él me dice oye yo no puedo actualizar hacia la versión 17 porque requiero la versión 16. Esto es algo en particular de este paquete, no está en todos los proyectos así que esto puede ser solo un problema que me esté saliendo a mí a menos que tengas este paquete y allí mi solución siempre ha sido darle force, o sea que haga igual la actualización de forma forzada sin importar que no haga match con lo que requiere Angular ESLint porque ahorita individualmente vamos a hacer también una actualización de ese paquete así que simplemente le hago force y ya debería actualizar. Listo, aquí ya acabo de hacer la actualización y si nosotros vemos acá tenemos el warning del paquete ESLint que nos dice oye este paquete no va a funcionar con la versión 17, ahorita más tarde lo vamos a hacer funcionar pero fíjate que lo que hizo fue actualizar el CLI que estaba en la 16.1.8 hacia la más actual que es la 17.1.0 pero no solo hizo eso también actualizó la versión de TypeScript, es decir actualizó de la 5.1.6 a la 5.3.3 y por acá también tenemos una actualización aparte de los paquetes de Angular de Stone.js que estaba en la 0.13.1 y la llevó a la 0.14.3 y nos da acá una serie de alerts, nos dice que por ejemplo deberíamos utilizar ciertas cosas pero por ahora simplemente necesitábamos actualizar esta serie de paquetes. Ahora si nosotros vemos ese historial de cambios utilizando la herramienta de Visual Studio Code vemos precisamente cuáles fueron esos ajustes por ejemplo si yo veo en el Angular.json veo que cambió algo de nombre por ejemplo había un atributo que se llamaba browser target y lo cambió a build target, esto es un ajuste pequeño pero que Angular está haciendo precisamente para todo esto que se viene de server server engineering y que luego lo vamos a utilizar ya utilizando varias de las ventajas que tiene la versión 17 y uno de esos pequeños ajustes que simplemente tenemos que hacer es este cambio chiquitito que es cambiar de browser target a build target y él lo hizo por ti, simplemente hizo esa actualización por ti cambió eso en el Angular.json si nosotros también miramos el package, package.json veámoslo acá ahí está, también podemos ver cuáles fueron los cambios que hizo realmente pues simplemente llevó todo hacia la versión 17, no hizo ningún ajuste más fíjate que si vemos aquí los únicos ajustes que hizo fue en el Angular.json, en el package.json y en el package lock que básicamente es pinear varias de las cosas que tenemos acá, así que ese no importa tanto pero el package.json y el Angular.json fueron en los que hizo cambios, hizo ajustes y pues hizo el taggeo de versión correspondiente aquí faltan algunas cosas, por ejemplo migrar el Angular CDK que también está en la versión 16 lo vamos a llevar también a la versión 17 y estos paquetes de ESLint que son los que al principio me estaban causando conflicto también los voy a llevar a la versión 17, así que sigamos con ese paso algo que debo hacer antes de ejecutar otro ngUpdate es guardar un commit el comando ngUpdate me pide por obligación que no hayan cambios en el estado de JIT precisamente entonces me pide hacer como un save, salvar todos los cambios y pues hacer un commit antes de ejecutar otro ngUpdate, así que lo vamos a utilizar utilizando la herramienta de inteligencia artificial que tiene Visual Studio Code para detectar los cambios en los archivos y generar un commit, veámoslo aquí por ejemplo entonces yo le voy a decir que si acepto todos estos cambios y acá tengo el botoncito en el cual con inteligencia artificial me va a generar un commit de acuerdo a los ajustes de estos archivos, entonces vamos a ver acá por ejemplo me dice que actualice Angular Dependencies y configuraciones de Build que precisamente son las que están en el Angular.json entonces hago un commit y listo y ahí ya quedó guardado, entonces ya puedo ir a la terminal y ejecutar el siguiente comando ahora el siguiente comando va a ser actualizar ese paquete que me estaba dando conflictos al principio que es el Angular y es lint slash Schemarks, entonces por acá lo tengo, lo que voy a decir es que lo quiero actualizar fíjate que en la primera actualización yo le tuve que decir oye vete a la 17 pero en este en este punto ya no va a ser necesario porque ya sabe que su versión core es la versión 17 de Angular así que tiene que hacer match con una versión que le haga sentido, entonces aquí simplemente le damos enter y él va a buscar ah ok tú estás utilizando Angular Core en la versión 17 por eso es el primer comando que se corre entonces esta actualización pues la tengo que llevar a algo que haga match con esa versión que tienes y por ende arreglaríamos como ese bug en el cual nos estaba molestando de que la versión 16 no haría match con la 17 pues ahorita ya le estamos haciendo eso que haga match que haga sentido con la versión 17 que es la que está en nuestro proyecto ya terminó de nuevo esta actualización y si vemos otra vez los cambios en Visual Studio Code aquí sólo vemos que sólo cambió el package.json no cambió nada más y vemos que lo que hizo fue llevar todo lo que tenía de ESLint hacia la versión 17 entonces acá tenía la versión 16.1 lo llevó hacia la 17.2.1 eso está perfecto también hizo algunos ajustes y miramos estos dos paquetes TypeScript ESLint y ESLint Parser también les hizo una actualización y en general también actualizó ESLint que acá estaba en la 8.39 y acá lo puso en la 8.53 listo este cambio ya lo tengo entonces simplemente voy a hacer un commit guardo cambios utilizo inteligencia artificial acá me dice que actualice de AppDependencies está bien me voy a quedar con ese commit y vamos a hacer la última actualización lo que faltaría dentro de esta actualización si vamos al package.json ya tenemos casi todo el core en Angular 17 ya tenemos la parte de ESLint también en la versión 17 nos falta el CDK y el Angular Material como ya tenemos el commit entonces simplemente hacemos ng update y esta vez vamos a decirle el Angular CDK y Angular Material damos enter él ya sabe que tiene que ser match con la versión 17 que es la que tenemos como core y pues va a hacer la actualización correspondiente y ya listo y vemos precisamente que lo único que hizo ese comando fue hacer un update en esa versión 16 hacia la 17 en los paquetes de Angular CDK y Angular Material sigamos el track de cambios tampoco hizo un cambio más en los archivos simplemente hizo un at rate como parte final entonces ahora nos toca guardar estos cambios hacer el commit ahí me dice actualizó de AppDependencies de Angular a la 17.1.0 ahí está actualizar y ya tendríamos nuestro proyecto es más lo podríamos probar en local a ver si funciona como debería funcionar entonces aquí vamos a hacer un ng serve y ver que nuestro proyecto siga funcionando y ya debería estar con la versión 17 aquí ya tengo el proyecto corriendo en local y podemos inspeccionarlo entonces por acá por ejemplo vemos que está en la versión 17 ahí está ng version 17.1.0 y vamos a ver si sigue funcionando acá le doy login tenemos nuestros productos acá podemos editar un producto vamos a volver a cambiar el precio y ahí lo ajusta podemos hacer filtros ahí están las compañías los users puedo hacer logout puedo si yo le doy una contraseña incorrecta por ejemplo esta me dice que el usuario tiene credenciales inválidas etcétera si yo vuelvo a refrescar ya me dejaría entrar porque está la contraseña correcta ahora lo más natural es que en tu repositorio como trabajaste eso en una rama aparte entonces pues tengas que hacer un pull request entonces vamos a hacer aquí el pull request voy a decir que acá está actualizando hacia la versión 17 no le voy a poner nada aunque deberíamos poner algo pero lo bajar hacia vacío normal creamos el pull request o puedes hacer merge localmente en tu proyecto pero pues normalmente el estándar es enviarlo y si vemos los cambios que digamos que si hacemos todo el summary o el resumen de toda esa actualización básicamente lo que hicimos fue cambiar unos atributos en el angular.json que ya son necesarios en la versión 17 que simplemente cambio de nombre fíjate que no cambia nada más es un cambio de nombre de browser target a build target y el resto es pues actualizar de forma ordenada las versiones solo que hicimos varios pasos para actualizarlo pero aquí ya quedó como el resumen de todo lo que actualizamos básicamente actualizamos todos los paquetes de angular angular router el cdk core force material etcétera todos lo llevamos a la versión 17 incluido también algunas paquetes como el ESLint y algo más cosas más globales como TypeScript entonces si el que nos está haciendo revisión de código ve que todo está bien que el proyecto sigue corriendo en un ambiente staging lo más normal es que pues ahora hagamos merge de ese pull request ahora normalmente podríamos darle merge entonces voy a hacer si por acaso me salió un error pero es un error porque no tengo los preview habilitados de Fibers entonces simplemente voy a hacer merge hago el confirm y ahora lo debería llevar pues debería ver mi rama main y aquí se debería estar actualizando yo tengo aquí integración continua con Fibers Hosting entonces básicamente él va a tomar todas estas dependencias actualizarlas construir el proyecto y mandarlo pues a Fibers Hosting en lo que termina la puesta a producción aquí básicamente te quiero recapitular lo que hicimos fue actualizar las dependencias es decir todo lo que necesita es más hasta la versión de Node que corría en mi máquina toca actualizarlo mínimo son la versión 18 para poder llevarlo a la versión 17 ahora sólo actualizamos dependencias pero una serie de características que tú ya puedes habilitar pero está en tu decisión es decir el proyecto puede ya está sobre la versión 17 pero no hemos habilitado todo el potencial porque hay muchas características que vienen incluidas en la versión 17 una de ellas por ejemplo el nuevo motor de building para que soporte servers a rendering con mucha más poder básicamente y con mucho menos tiempo de building precisamente utiliza unos nuevos builders el nuevo control de sintaxis etcétera pero todo eso es opcional y pues necesitaría de una configuración diferente pero lo primer el primer paso si quieres utilizar todas esas ventajas que te habilita la versión 17 es el que hicimos en este vídeo que es actualizar tus dependencias a partir de ahí ya entonces podemos habilitar todo ese mundo de características que traen en la versión 17 así que este primer paso es crucial para utilizarlo y en los siguientes vídeos precisamente vamos a habilitar esas características como el nuevo flujo de sintaxis pues ya utilizando esta versión el nuevo builder y te voy a explicar cada uno de los builders y para qué y por qué hay tantos hay cuatro pero porque cada uno y cuáles son las características de cada uno y cuál utilizar en particular caso de negocio y pues algunas otras características que están ya en la versión 17 si vemos acá ya terminó nuestro deploy y todo salió perfecto entonces aquí tenemos un check lo que quiere decir que si yo voy a esta aplicación que está en producción que es esta y le hago inspeccionar bueno acá me dice que está en la versión 16.1.8 pero debe ser caché entonces pues simplemente voy aquí a application limpio el caché que tiene este sitio lo vuelvo a recargar y si inspecciono ahora tenemos la versión 17.1.0 la primera versión era una versión pues que tenía en caché pero ya limpiando el caché y haciendo reloading pues simplemente ya tenemos la nueva versión que utiliza la versión 17.1.0 de Angular y vemos que literalmente la aplicación sigue funcionando tal cual sigue funcionando como debería funcionar tenemos aquí nuestro filtro electrónica tenemos todo lo pertinente en cómo debería funcionar el logout la contagia incorrecta todo funciona tal cual y funciona bastante bien solo con hacer esta serie de pasos y esta serie de ajustes y listo eso fue todo por este vídeo literalmente este es el primer paso para luego ya habilitar todo el mundo de características que vienen en la versión 17 y que voy a lanzar en los otros vídeos pero necesitas este primer paso porque toda esta serie de características las voy a explorar en esta aplicación el nuevo sistema de sintaxis, los builders, los signals como inputs y un montón de cosas muy interesantes pues probablemente lo vamos a hacer en este proyecto y necesitamos este primer paso así que recuerda suscribirte al canal por acá te van a salir unos vídeos recomendados también acerca de ello así que suscríbete está muy pendiente porque voy a subir los vídeos habilitando este potencial que tiene Angular versión 17 con todas sus características