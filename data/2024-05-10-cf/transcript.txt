 Te voy a enseñar cómo hacer un despliegue de tu aplicación Angular a Cloudflare, que es un proveedor bastante interesante y bastante innovador en los últimos años. Y algo muy interesante es que dentro de Cloudflare podemos utilizar bastantes herramientas de IA, pero eso lo veremos más adelante. Algo que tienes que tener muy en cuenta para este video es que voy a desplegar una aplicación que es una Single Page Application, que es lo que normalmente encontramos en Angular. Sin embargo, también está la opción de en Angular desplegar una Server Side Application. Eso lo voy a dejar para otro video, pero por ahora pues hagamos la Single Page Application. Miremos cuál va a ser el proyecto. El proyecto es este, es bastante sencillo, es una aplicación como de emulación de un e-commerce que se conecta a una API y hasta el layout es bastante sencillo. Luego espero mejorar mucho este layout de este proyecto con Tailwind, con soporte a Dartmode, etc. Pero por ahora simplemente... Nos sirve como ejemplo. Entonces básicamente acá tenemos unas categorías y podemos empezar a filtrarlo y esto lo trae desde una API. Acá, por ejemplo, podemos ir a ver un producto, ir a ver como un carrusel pequeño de compra, agregar ese producto al carrito. Vamos a ver por acá, por ejemplo, agregar este otro. Y ahí nos va apareciendo, ¿no? Entonces, obviamente el proyecto tiene un montón de cosas por mejorar, pero por ahora nos sirve para desplegar este simple proyecto. Vamos a ver cómo lo conectamos a Cloudflare. Este proyecto o el código lo van a encontrar en Angular Cloudflare. Es un proyecto súper sencillo y vamos a ver cómo lo conectamos hacia Cloudflare. Lo primero que tienes que hacer es ir a dash.cloudflare.com. Obviamente tienes que tener una cuenta creada. Si no la tienes, créala, es algo normal crear una cuenta. Simplemente créate la cuenta como tal y vas a tener un dashboard como este. Cloudflare tiene bastantes servicios de inteligencia artificial, de protección a ataques, de hosting, bueno, tiene un montón de cosas. Hasta dominios puedes gestionar acá. Realmente se está volviendo en mi cloud preferida sobre otras, sobre Amazon, sobre Azure, sobre Google Cloud. Realmente tiene un montón de ventajas. Y luego espero contarles un poco más sobre esto. Pero, por ejemplo, acá yo tengo dos dominios activos, que es nicobites.com y nicobites.store. Pero esta parte de los dominios no nos interesa ahorita. Vamos a entrar a una parte que se llama Workers y Pages. ¿Ok? Aquí vas a encontrar algo como esto. Acá tengo varias cosas ya subidas, experimentos bastante interesantes con inteligencia artificial y mucho más. Luego se los muestro. Pero aquí estás tu Cloud ID. Si quieres empezar a hacer deployment automático y cosas un poquito más avanzadas, tienes que tenerlo en cuenta. Pero por ahora simplemente vamos a crear una aplicación. Cloudflare tiene dos sistemas como para hacer deployment. Algo llamado Workers y Pages. Workers es supremamente interesante. Lo recomiendo mucho para APIs porque funciona en el Edge. Y luego hablaremos de computación en el Edge, que eso es una tendencia bastante interesante. De por sí, recientemente, Bersel apoyaba mucho el Edge. Y luego hizo rollback y dijo como que el Edge ya no estaba tan bueno. Pero Cloudflare tiene un Edge Computing muy interesante. Y espero hablarles de eso. Y precisamente vamos a hacer esta intro. Empezando a manejar esta nube con algo muy básico que son las Pages. Pero Workers básicamente sirve para... hacer aplicaciones un poco más del lado del servidor. Ahí es donde también podríamos explorar cómo hacer deployment de Angular con Server-Serve Rendering. Pero también tiene... Los Workers tienen acceso a Inteligencia Artificial. Por ejemplo, aquí hay aplicaciones de Inteligencia Artificial como una aplicación que hace clasificación de imágenes, Speech-to-Text. Porque dentro de la nube de Cloudflare están modelos de Inteligencia Artificial. Pero bueno, ahorita no vamos a hablar de Workers. Venimos por Pages. Y aquí vamos a hacer la parte más sencilla. Uno puede subir el asset como al final es una Single Page Application, que son archivos estáticos. Puedes subirlo aquí y ya. Pero también te ofrece una parte en donde puedes conectar tu cuenta de Github o de GitLab. Luego si quieres, me dejas en los comentarios también una forma de automatizarlo. Por ejemplo, con Github Actions. Que esto requiere un poquito más de conocimiento de Github Actions para manipular el deployment. Yo lo he hecho y luego les muestro un poco cómo funciona. Porque es supremamente interesante. Y fácil. Pero por ahora vamos a hacer lo más fácil. Que es conectarlo a la cuenta de Git. Entonces acá, por ejemplo, tengo mi cuenta ya ligada. Acá tengo el proyecto que quiero mostrar, que quiero desplegar. Que en este caso es Angular Cloudflare. Tengo otros ejemplos. Estos que dicen Full Stack. Es porque es un Mono Repo. Y en esos de Mono Repo tengo precisamente desplegado la API en Workers. El Frontend en Pages. Y otras cositas más. Pero en fin. Vamos a seleccionar Angular Cloudflare. Vamos a decirle que sí. Vamos a llamar al proyecto tal cual. Fíjate que nos va a crear un dominio. Se llama Angular Cloudflare con Pages.dev. Vamos a seleccionar cuál es la rama. Acá me dice que sí. Qué framework está utilizando. Fíjate que de por sí, tú podrías desplegar otro. Digamos que tú entraste aquí porque te gusta Angular y quieres desplegar en Angular. Pero, realmente mira. Puedes tener aplicaciones en Astro, en React App. Bueno, un montón de Frontend application hasta Ness. Para poder hacer el despliegue. Vamos a escoger Angular. Y me dice que cuál es el... Como el build. El comando con el que él debería hacer build. Entonces dice npm run build. Acá hay algo interesante. Acá por ejemplo nos dice. Esto es interesante si nosotros tuviéramos Mono Repos. Por ahora no lo vamos a hacer. Y si quisiéramos inyectarle alguna variable de entorno al momento que esté haciendo el building. Por ahora tampoco lo vamos a hacer. Lo que sí vamos a ajustar es el dis. Porque si nosotros hacemos un build. Realmente este no es el dis adecuado. Hagamos el build de la aplicación y veamos cuál es el adecuado. Si hacemos el build de la aplicación. ngBuild. Vamos a ver en dónde nos deja nuestro assets. Y eso va a depender de cuál builder tú estés utilizando. En un video anterior. Y te lo dejo por aquí. En alguna de las cartas. O en los comentarios. Angular tiene tres builders. Y de acuerdo al builder. Puede que el dis. La carpeta de estáticos. Lo deje algo diferente. Entonces tienes que tener muy en cuenta eso. Por ejemplo. En mi caso. Que yo estoy utilizando el builder de application. Que es como el builder más rápido. Beneficioso. Con esbuild. Con byte. Y que ya empieza a tener cosas listas para servers. Que luego lo vamos a ver. Básicamente me dice. Mira. Que si yo voy a utilizar un software. Para hacer un software. Para hacer algo. Para hacer un software. Para hacer algo. Bien. Y aquí. Vamos a verle un paréntesis. Que ya está. Y si nosotros entramos. Vamos a entrar. Vamos a hacer un cat. Y vamos a entrar y ver. Cómo esa carpeta. Dist. Y veamos acá. Store. Si yo entrara aquí. Es más. Si me voy a entrar. Voy a entrar acá. Voy a hacerle un ll. Y veamos que acá tengo. Es un suit folder. Bien. O sea. No tengo aquí. Directamente los archivos. Veámoslo. Veámoslo, creo que se ve un poquito más fácil desde Visual Studio Code, entonces devolvámonos, abramos nuestro proyecto, acá, este es el disk y fíjate que está dentro de una carpeta store y luego los archivos estáticos están dentro de una carpeta llamada browser. Esto realmente puede cambiar si tú no estás utilizando el builder, por ejemplo, si yo estoy utilizando application, si estás tú utilizando browser, aquí, browser, el browser builder o el ESBuild browser, esta carpeta puede no venir, la carpeta browser puede no venir, pero en la application sí viene, en el builder de application sí viene, porque básicamente si nosotros luego queremos soportar server-side rendering, Angular lo que va a hacer es crear una carpeta. Una carpeta llamada server y dejar los archivos que van a venir desde el servidor en otra carpeta, entonces básicamente si tienes application, todo lo que es la SPA, la página estática va a quedar en el browser, pero server, pues los archivos del servidor. Por ahora no tenemos server-side rendering, no hay problema, entonces simplemente lo eliminamos, pero básicamente todo esto para decirte, oye, el build es dentro del browser, si no estás utilizando application, sino otro builder. Puede estar directo, store, ¿listo? Entonces básicamente vamos a ir acá, le voy a decir, mira, tu div está en store, si estás utilizando cualquier builder que no sea el de application, este funciona, pero si estás utilizando application, entonces tendríamos que decirle que los archivos estáticos para el navegador están en browser, es decir, una carpeta más y le decimos browser. Listo, le decimos save, deploy, vamos a ver, de por si podemos en algún momento ver el build de la aplicación. Y como quedó conectado a GitHub, cada vez que hagamos commit va a hacer este proceso. Aquí ya podemos ver cómo está el proceso y vemos que como se va a conectar a Git, de por si por aquí si vemos el código, ya debe tener un, va a tener un action automático que se agregó al momento de yo darle permisos. Yo ya tenía mi cuenta conectada a GitHub, pero si no la tienen es darle permisos y ya, pero fíjate que acá está generando, acá vemos como ya está generando el building de la aplicación. Ahí está el building de la aplicación, acá genera ya los assets y fíjate que acá dice que listo, que subió, que básicamente encontró nuestra carpetita y lo subió y supuestamente el sitio ya fue desplegado y me dice que todo salió perfecto y me dice el commit. Entonces vamos a continuar, acá ya me crea un proyecto, si yo me devuelvo aquí a workers y pages, fíjate que me crea un proyecto con este como rayito, esos son cluster pages. Lo que es este como triángulo. Los triángulitos son workers y bueno y otras cosas allí. Por ejemplo, mi sitio y otras aplicaciones las tengo precisamente en este cloud porque se está volviendo, como les mencionaba, mi nube de preferencia para inteligencia artificial, para hacer productos de inteligencia artificial, Angular, APIs con Hono, que Hono es otro framework muy interesante para Edge Computing porque pues básicamente los workers de Cloudflare no es un ambiente de hardware. Es un ambiente de Node, si no es Edge Computing, un ambiente mucho más chiquito pero mucho más rápido y distribuido, en fin, luego vamos a hablar de eso también. Pero en fin, entonces aquí ya tenemos la aplicación y vamos a ver, vamos a ver el dominio, a ver si la desplego o no. Fíjate, ahí ya tenemos nuestra aplicación, literalmente tenemos la aplicación ya así que puedes subir tu aplicación y ligarla muy fácilmente. Como ya quedó ligada a GitHub automáticamente. A mí no me gusta mucho que quede así como ligada automáticamente, me gusta a mí controlar el proceso de CI, de desarrollo y de entrega continua por medio de GitHub Actions. Luego te lo enseño cómo sería manualmente, pero si lo quieres ver, puedes verlo en alguna de estas aplicaciones que se llama Full Stack. Entonces básicamente acá tengo unos workflows para desplegar alguna de las aplicaciones. Entonces, por ejemplo, acá tengo el workflow para utilizar y desplegar a Cloudflare. Pero como que yo controlo esa acción. Como que yo digo cómo te vas a distribuir y pues con ciertos escenarios. En fin, pero en este caso que lo hicimos como por la forma automática, entonces vamos a ver acá Cloudflare. Pues simplemente ya quedó conectado y Cloudflare se encarga de, creo que para proyectos que no son monorepos, funciona perfecto. Para un monorepo creo que sí es más interesante hacerlo por GitHub Actions. Pero hagamos un comita, hagamos un pequeño cambio. Por ejemplo, voy a cambiarle este. Float byte por NicoStore. Vamos a ver. En el código. Entonces vamos a ir al código. Eso no sé en dónde lo tenga. Debería estar en ShadedComponentesHeader. Ahí está. Aquí está. NicoStore. Listo. Entonces este va a ser mi commit. Vamos a poner un commit. SharedComponentesHeader. Vamos a hacer el commit. Lo vamos a subir. Esto es la rama main. Así que automáticamente aquí vamos a ver cómo se empieza a desplegar un GitHub Actions que está conectado a Cloudflare Pages. Si nosotros vemos acá, acá de pronto una desventaja es que realmente no vemos el proceso de building. O sea, no vemos. Tendríamos que ir aquí a View Logs y ahí nos va a llevar al proceso de building dentro de la nube de Cloudflare. Y vemos cómo realmente ese building se está llevando a cabo. En este momento está haciendo un deployment. Está volviendo a construir la aplicación. Y la va a volver a lanzar. Pero si yo ya controlara las actions, por ejemplo, como te comentaba en alguna de las otras aplicaciones que sí tengo el control en GitHub Actions. Si vemos aquí las actions. Vemos, por ejemplo, que acá yo sí puedo ver cómo el build. O sea, como literalmente aquí sí me queda el log dentro del mismo GitHub Actions. Puedo ver cómo se está desplegando. Por acá, por ejemplo, veo cómo se desplegó a Cloudflare. ¿Por qué? Porque yo estoy controlando todo. Entonces, yo voy a ver cómo se desplegó a Cloudflare. Pero si lo hacemos de forma automática, como te mencionaba, simplemente acá vamos a ver. Volvamos a nuestro repositorio en Angular Cloudflare. Va a ocurrir, pues sí, de forma automática, pero no vamos a ver los logs aquí. Vamos a tener que ir a este link y vamos a ver los logs desde allá. Al parecer todo fue bueno. Entonces vamos a volver a entrar a este dominio que nos creó para nuestra aplicación. Y pues acá está, NicoStore. Literalmente ya tenemos la aplicación andando, funcionando y directo. Ahora, uno de los beneficios también es que si aquí mismo controlas tus dominios, por ejemplo, NicoBytesStore o NicoBytes.com, si tú gestionas aquí también tus dominios, que también lo recomiendo bastante, porque Cloudflare también tiene unas cosas de seguridad para protección de ataques y un montón de cosas. Es muy interesante. Pero voy a agregarle el dominio. Entonces voy a ir acá a Cloudflare y aquí le voy a crear un custom domain. Entonces aquí, por ejemplo, yo le voy a decir que esto salga en NicoBytes.Store, que es un dominio que compré precisamente para esto. Como ya lo tengo atado, o sea, ya lo tengo aquí en mis dominios, en mis websites, ya lo configuré. Realmente la configuración no es muy, muy complicada. Simplemente es, pues, traer tus DNS aquí. O es más, aquí mismo puedes comprar dominios. O sea, Cloudflare también. Eh. Desde Cloudflare también puedes comprar dominios. O puedes transferirlos. Yo normalmente utilizo Nameship para comprar dominios. Eh. Y desde Nameship, básicamente lo que hice fue apuntarlo hacia Cloudflare para que yo lo pueda administrar desde Cloudflare. Pero desde aquí tú puedes también comprar dominios. O sea, puedes poner, no sé, interviews.ai. Vamos a ver si está disponible. Lo buscamos. Eh. Ah, no. Estos son los dominios que yo tengo acá. Todavía no tengo. Ninguno directamente desde Cloudflare. O sea, comprado desde Cloudflare. Pero sí lo estoy administrando. Acá fíjate que puedo transferir dominios. O sea, me puedo traer los de Nameship aquí. Que probablemente lo haga. O registrar. Entonces aquí es donde debería registrar un dominio nuevo. Y me dice, mira, pues están estos dominios. Puedes comprarlo o no, etc. Me dice que interviews.ai no está disponible. Entonces, pues, ajá. Pues no está disponible. Pero me ofrece opciones. Entonces aquí mismo puedes comprar un dominio. Puedes administrarlos o transferirlos. Aquí yo ya pasé como que conecté de Nameship. Mi sistema de dominios. Hacia Cloudflare. Entonces aquí ya está activo. Ya se hizo match. Entonces como ya se hizo match. Entonces puedo ir aquí a los workers. A los. Ah, por acá. Ah, creo que me hice acá. A los workers. Por acá de Cloudflare. Y como ya lo tengo configurado. Entonces le digo, sí, mira. Yo quiero el dominio que tengo acá. Que es nicobets.store. Lo quiero apuntar. Y activar. Y activar. Y activar. Y va a apuntar a. Pues hacia mi page. Entonces aquí va a durar un poquito inicializándose. Normalmente esto. Realmente es muy rápido. Yo lo he visto en media hora. Mucho menos. Lo que más tarda es como ligar el dominio. Entonces si tú compras dominios en GoDaddy. En otro lado. Pues simplemente hay que esperar un poco. Pues a hacer esa configuración de dominios. Si están interesados en eso. Si quieren se los muestro. Pero realmente no es muy complicado. Y hay mucha documentación. Y forma. Pero acá básicamente. Pues ya. Pues los estoy conectando. Y es más. A veces creo que se conecta de una. Déjame ver si ya está. Nicobets.store. No. Fíjate que todavía está. Pues me dice precisamente que. Para ver. No está funcionando. Pero en unos ratitos. Pues nuestra aplicación. Que tendría. Y que ya tiene HTTPS. Por defecto. Antes nos tocaba como. Firmar. Y estar pendientes. Del certificado. Certificados. SSL. Para poder. Tener. Dominios. Por HTTPS. Pero esto ya es casi automático. En Cloudflare. O no casi. Es automático. Ya no te preocupas por eso. Se encarga de. Gestionarte todo esto. Y. En los dominios que tengas. Déjame ver si ya está. Ah fíjate. Ya está. A ver. Vamos a ver. Nicobets.store. Listo. Entonces literalmente. Ya. Tenemos. Nicobets.store. Que es un dominio que compré. No voy a montar una tienda. De nada. Simplemente es. Una emulación. Y algo muy interesante. Es. Lo siguiente. Uno también puede. Digamos que yo tenga. Otra aplicación. Otra aplicación de Angular. ¿No? Gestionada en otro lado. Por ejemplo. Si son seguidores de mi canal. Sabrán que yo. Hace. Tiempo. Estoy trabajando. Como en un administrador. ¿No? De esta tienda. Ficticia. Entonces. Por ejemplo. Yo apunte. El administrador. Hacia un subdominio. Que sería. Admin. Nicobets.store. Vamos a ver. Si entra. Ahí entró. Entonces. Este es el administrador. Como de ese e-commerce. Entonces. Por ejemplo. Voy a ir a. Nicobets.store. Nicobets.store. Ahí está. Y. Pues listo. Acá. Tenemos como. El administrador. De esta tienda. Ficticia. Voy a editar. Por ejemplo. Este. Este. Editar. Vamos a ver. Si todo va bien. Ahí está. Editar. Entonces. Si yo refresco. Pues acá. Literalmente. Tengo. Ya. Pues. Tengo la edición. Porque. Pues. Es una API. Y todo se conecta. Etcétera. Entonces. Fíjate que ya tengo. Mi aplicación. Que también está montada en Cloudflare. Que es. Admin. Nicobets.store. Y luego ya la. La aplicación principal. Que sería. Nicobets.store. Ya gestionada. Desde Cloudflare. Listo. Eso. Ha sido. Precisamente. El video. Entonces. Aquí ya tenemos. Nuestra aplicación. Y te enseñé. Cómo. Precisamente. Despegar una aplicación. De Angular. Que es una. Single page application. Gracias. Básicamente. A las herramientas. Que tiene. Cloudflare. Solo fue hacer. Literalmente. Fue hacer un par de clics. Luego. Puedo enseñarte. Cosas más avanzadas. Que ya. Gestionar todo el proceso. De CI. CD. Hacerme unos repos. Con esto. Pero. Sabes. Lo que más me interesa. También. Es que. Esta aplicación. Esta. La volvamos. Server. Server. Rendering. Por muchas cosas. Porque. Básicamente. Un e-commerce. Necesita. Server. Server. Rendering. Necesita. Ser amable al SEO. Y Angular. Tiene bastantes. Características. Para ya. Habilitar. Server. Server. Rendering. Que lo han venido trabajando. Muchos. De la versión. Dieciséis. Diecisiete. Y en la futura. La dieciocho. O en las que vengan. Esto va a estar. Muy. Muy optimizado. Entonces. Los próximos videos. Sería. Habilitar. Server. Server. Rendering. A esta misma aplicación. Y un par de cosas. Que tendríamos que hacer. En Cloudflare. Para que. Nuestra aplicación. Que es. Server. Server. Rendering. Así que. No siendo más. Pues suscríbete. Mira. Si te interesó. ¿No? Déjame en los comentarios. Si conocías. Cloudflare. Como proveedor. Tiene un montón de servicios. A mí me deja impresionado. Porque tiene un montón de servicios. Dominios. Ataques. Inteligencia artificial. Un montón de cosas. Así que. Nada. Suscríbete. Compártelo. Y déjame tus comentarios. En la caja. O en la sección de comentarios. De YouTube. Nos vemos.