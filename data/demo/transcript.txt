 En este video te voy a enseñar cómo desplegar una aplicación que tiene Server Side Rendering en la nube de Cloudflare. ¿Y por qué esto es importante? Porque precisamente ahorita con Angular y habilitando Server Side Rendering necesitamos más opciones para desplegar nuestras aplicaciones. Porque precisamente ya no es una Single Page Application, ya no son solo archivos estáticos. Literalmente necesitamos un entorno de ejecución de JavaScript del lado del servidor para que haga el prerenderizado y ejecute el Server Side Rendering de Angular. Y para eso hay varias opciones. Por ejemplo, una opción muy interesante y de por sí que espero hacer también un video de ello, es Heroku. Heroku con una instancia de Node en la cual corramos nuestra aplicación. Pero en esta ocasión vamos a hacerlo con Cloudflare porque me parece una nube bastante interesante y de por sí ya habíamos hecho el despliegue de nuestra aplicación con Cloudflare. Solo que utilizando. Solo como archivos estáticos, utilizando Cloudflare Pages para un sitio de Angular común y corriente como una Single Page Application. Pero como ya habilitamos Server Side Rendering, pues ahora quiero precisamente desplegar esto en la nube de Cloudflare y para ello nos va a tocar hacer como ciertas cositas, triquis, para que funcione, para que el Server Side Rendering funcione en la nube de Cloudflare. Recuerda, también puedes hacerlo en alguna otra instancia de Node un poco más tradicional, un Heroku, una instancia en Amazon de Node, una instancia de DigitalOcean con Node, pero al final tienes que tener un entorno de JavaScript, de ejecución de JavaScript en el servidor, sea Node o cualquier otro. A mí me parece interesante Cloudflare porque no es un entorno de Node, es un entorno mucho más pequeño de Node que se llama Edge Computing y pues corren un poquito una parte chiquitita de lo que se podría decir JavaScript del lado del servidor, pero es bastante interesante. Luego les hablo de por qué en un video en específico me parece muy interesante todo lo que es Edge Computing y Cloudflare me parece que es un buen proveedor que utiliza esta tecnología. Pero si quieres hacer algo más tradicional como lo convencional, pues una aplicación en Heroku con Node, una instancia ahí corriendo que tiene cierto tipo de instancias hábiles, hay instancias de 7 dólares, de 5 dólares o una instancia en DigitalOcean, pero lo importante es que tenga Node. ¿Por qué? Porque ahora necesitamos ejecución desde el lado del servidor. Solo para que recuerdes, este es nuestro proyecto, nicobytes.store y si ves aquí básicamente tenemos nuestra aplicación que hace una aplicación en Angular normal, sin embargo esta aplicación es Single Page Application, es decir, si yo voy y veo el código fuente de la página, veo que realmente no se está generando ningún contenido, podemos ver aquí el app root que está vacío, nada se genera desde el lado del servidor, todo se genera desde el lado del cliente. Nosotros en un video anterior, o básicamente en un video anterior ya habíamos trabajado en esto y por aquí en YouTube o en alguna de las cartas de YouTube te dejo precisamente el video en el cual esta aplicación la habilité y la volví a Server Surrendering, pero ahora voy a trabajar en cómo desplegar esa aplicación de Server Surrendering. Necesitamos opciones, en este caso voy a escoger Cloudflare, pero recuerda, puedes escoger cualquier otra. Voy a hacer un video con Heroku porque igual me parece también una nube bastante interesante, en la cual ahora podrías desplegar tus aplicaciones de Server Surrendering de Angular, porque recuerda que ya no es suficiente un servidor de archivos estáticos, como un S3 o un GitHub Pages o un Fiber Hosting, necesitamos realmente un entorno de ejecución de JavaScript del lado del servidor, no solo archivos estáticos. Entonces, Cloudflare Pages, de Cloudflare, sirve tanto para archivos estáticos, como la aplicación en producción que tenemos en este momento, pero también si hacemos una configuración correcta, podemos habilitar Server Surrendering en esa misma nube. Así que veamos cómo funciona. Si vamos a la documentación developers.cloudflare.com y vamos a la documentación de Pages, vamos a encontrar aquí una guía de frameworks. Vamos a buscar Angular, por acá debe estar Angular, Angular, Angular, acá está. Y aquí hay algo un poquito raro, porque básicamente lo que ellos nos recomiendan es que iniciemos un proyecto desde cero, que literalmente copiamos este comando y creemos una aplicación desde cero. Este comando va a tener todas las configuraciones que necesita un proyecto en Angular para que se pueda desplegar en Cloudflare Pages utilizando Server Surrendering, un entorno de ejecución que corra JavaScript desde el lado de un servidor. El problema de este comando, es que tendríamos que recrear la aplicación desde cero. Y nosotros queremos habilitarlo en la aplicación que ya tenemos. Entonces básicamente lo que voy a hacer es crear este proyecto, ver cuáles son los archivos que cambian, cuáles son las configuraciones, e irlo haciendo manualmente en paralelo en el proyecto que tenemos al aire y ver si se hace Server Surrendering. Así que copiamos este comando y llevémoslo a nuestra terminal. Estando en la terminal, copiamos el comando y vamos a ver qué pasa. Al final, este comando lo que es, es un wrapper, un contenedor del CI de Angular. Entonces realmente lo que te va a crear es un proyecto desde cero con Angular y con Server Surrendering. Por eso aquí, por ejemplo, el comando es tal cual como si hubiéramos hecho un nginu, pero luego va a ser un poquito más de procesos como para configurar y sobreescribir ciertas configuraciones que Angular tiene por defecto para que funcione en el sistema de Angular. En la nube de Cloudflare con la tecnología de Edge Computing de Cloudflare. Por ejemplo, él va a reescribir server.typescript. Normalmente server.typescript utiliza en una aplicación convencional de Angular con Server Surrendering utilizaría Node y Express para hacer el Server Surrendering, pero en la nube de Cloudflare con Edge, pues Express no está hábil, porque precisamente es un entorno un poquito más chiquito de lo que encontraríamos con Node. Entonces vamos a ir viendo cómo hacerlo. Aquí ya acabo de hacer la configuración, Vamos a ir viendo como hacerlo. Aquí ya acabo de hacer la configuración, hacer como el setup y luego fíjate que acá nos agrega algunas configuraciones más, por ejemplo instala Rundler que básicamente es como un entorno para poder ejecutar de forma local y hacer despliegues de forma local hacia la nueva Cloudflare, también nos trae unos typings para Cloudflare, agrega también typings en el test de config, también modifica el angular JSON, agrega modificaciones en el app config, bueno hay un montón de configuraciones y luego nos pide si queremos hacer deployment de esta aplicación, yo le voy a decir que no, solo quiero pues como los archivos y voy a entrar a esa aplicación, cd myangularapp, porque lo que voy a hacer es tratar de copiar esa misma configuración en mi aplicación que ya está funcionando, entonces vamos a ver el código, entonces aquí tienes esta aplicación que es la que el CLI de Cloudflare, que es la que Cloudflare automáticamente me agregó con una configuración adecuada para hacer server side rendering, sin embargo lo malo de este comando es que literalmente no lo podemos hacer para un proyecto que ya esté al aire, que ya digamos que necesitemos pues tener, agregarle esta característica, él lo que hace es hacerlo todo desde cero, entonces voy a ir progresivamente jalando algunos archivos e explicando cada una de esas cositas, recuerda si tú quieres hacer server side rendering en algo más, te voy a decir que no, entonces voy a ir progresivamente jalando las islos de Cloudflare, te voyvuemos nuestro valuableี้ vamos a ponercer en var, que es la que más nosrasionan si se ap dieda que vulnerabilities no podemos que retengamos por His mismo. Y aquí tenemos toda la configuración, cats, con esto hace que quede más cómodo si luego lo que vamos a quitarle es 수�點 con él nada mas está encze y se pega y por eso vamos a hacer alternate vídeos y pages y unsafe Youtube enter es más te de". solo que nos la da en un proyecto en vacío, en un proyecto en cero, nosotros necesitamos hacerlo en un proyecto que ya tiene código, no en un proyecto desde cero, y entonces este sería nuestro proyecto base que realmente ya tiene código, que ya tiene habilitado server-side rendering, solo que lo hace con express y con node, literalmente el server-side rendering que él hace, lo hace con node y express, y vas a ver que hay ciertas cositas que cambian para utilizar el server-side rendering en la nube de Cloudflare, por la tecnología de Edge Computing, ahí cambia, recuerda, si igual quieres no probar esto y desplegarlo en un servidor de node normal, existe Heroku, existe DigitalOcean, etc., les queda pendiente realmente también hacerlo con Heroku, me parece una idea bastante interesante, recuerda que el comando para ejecutar el server-side rendering de una aplicación, pues de esta aplicación con node o express, sería este comando, entonces vamos a ejecutarlo, run, ahí está, básicamente tenemos un servidor en node y express, bueno, node con express, que es el que hace el server-side rendering y despliega nuestra aplicación, este sería el comando que nosotros deberíamos ejecutar en un Heroku, en un DigitalOcean, en una nube tradicional que tenga un entorno de node, sin embargo, quiero utilizar la tecnología de Cloudflare, ya que es mucho más económica y pues desde mi punto de vista, Edge Computing es bastante interesante, acá nos dan un proyecto base con una configuración y es la que voy a hacer, lo primero que voy a hacer es que si te fijas, voy a sobreescribir el archivo server.typescript, ¿por qué? porque normalmente recordemos que en el entorno de Edge Computing, realmente no tenemos un entorno de node completo, tenemos es como un microentorno, pero igual es un entorno que nos permite ejecutar JavaScript desde el lado del servidor, solo que es, un microentorno, digamos, una parte chiquita de node y que con esta configuración pequeña, podríamos habilitarlo, ahora, ¿cuáles son los beneficios de eso? pues hay muchos beneficios y ahí les quedo pendiente un video en específico de Edge Computing, pero solo para dar un abre bocas, básicamente esta tecnología de Edge Computing lo que hace es no ejecutar un entorno tan pesado, tan grande como node, que necesita una instancia, que necesita pues estar corriendo, ejecuta un entorno mucho más chiquito, eh, basado en JavaScript, normalmente a esto lo llamamos Edge Computing y también tiene mucha web assembly y demás, pero ¿por qué es Edge Computing? porque al tener un entorno tan chiquito, se puede ejecutar sobre el CDN de Cloudflare, entonces no necesitamos una instancia, un servidor como tan pesado, o como con todo lo que necesitan es un servidor de node para correr, sino que es un entorno de JavaScript pequeño que puede correr en un CDN, y Cloudflare tiene un CDN gigante, ahora, precisamente ¿qué nos permite hacer un CDN? o las ventajas de un CDN, pues precisamente que el CDN está distribuido en todo el mundo, entonces tu aplicación correría con menos latencia, por ende más rápido, ¿qué significa eso? que si tú es proveedor de Cloud, tiene un CDN localizado en Brasil, localizado en Bolivia, localizado en Colombia, que no son servidores per se, son como réplicas pequeñas de entornos, eh, y hay ciertas ventajas y desventajas de esto, pero, en fin, literalmente les voy a hablar de eso en un video más a fondo, por ahora, simplemente, veamos y sigamos con la configuración, para ejecutar nuestra aplicación de Angular con Server-Server Rendering en este entorno de Cloudflare y Edge Computing, listo, luego de esa pequeña y de pronto muy superficial intro de Edge Computing, pues precisamente aquí, necesitamos sobreescribir ese archivo por este que está acá, porque dentro del Edge, dentro de esa nube de Cloudflare, que de por sí, una de las ventajas también, aparte de latencia y de más rapidez, es costo, no es tan costosa como mantener un servidor de Node siempre, pues corriendo, es mucho más liviano y por ende mucho más barato, entonces voy a literalmente copiar y pegar este archivo y lo voy a llevar hacia mi, mi server.htjs, que de por sí él utiliza Express, pues dentro de Edge no podemos correr Express, entonces, pues simplemente lo copiamos, lo pegamos y listo, entonces aquí simplemente hacemos ese cambio, él básicamente está haciendo ciertas cosas, aquí voy a decirle que por favor me permita ejecutar este punto Any sin ningún problema y pues básicamente lo que está utilizando es la tecnología de Edge Computing para poder habilitar esto y este sería el formato, entonces ya no lo ejecutamos con Express, lo ejecutamos con la tecnología de Edge Computing para hacer serverless rendering de Cloudflare, para eso simplemente copiamos y pegamos con base a este que ya nos dejaron en la configuración de un proyecto desde cero. Otro cambio que necesitamos es instalar algunas dependencias, precisamente necesitamos estas dependencias, la más importante es esta, la de Render, que es como el entorno en el cual podemos, es el CLI para poder hacer despliegues, poder probar precisamente en un entorno de desarrollo, etcétera, vamos a necesitar esta dependencia, vamos a necesitar también esta dependencia, esta de MiniFlare, Flare, Cloudflare, MiniFlare, y esta de los Typing, son como las que vamos a utilizar y todas son de desarrollo, entonces vamos a ir a la terminal, vamos a ejecutar npm i y vamos a traernos esas dependencias, Cloudflare, el Typing, esta de MiniFlare, que también es un entorno sobre todo si queremos hacer testing, y el Grandelab, listo. Todo lo ejecutamos, y lo instalamos como una dependencia de desarrollo, una vez hecho eso, y mientras se instalan, vamos a ver qué otras cosas también tenemos que hacer, de por sí, vamos a ir viendo aquí en lo que cuando él configuró todo, pues qué más cosas hizo y vamos haciéndolo por pasos, entonces ya tenemos el Grandelab, tenemos esto, fíjate que también agregó unos Typing a tsxconfig, también voy a pegarme esos Typing, básicamente agregó como Typing la librería de Cloudflare, entonces voy a agregarla, voy a solo copiar esto y lo voy a llevar hacia mi proyecto de Typing, por acá vamos a ver si tenemos Types, creo que no teníamos Types aquí, esto lo podemos agregar directamente después del lib, aquí lo podemos hacer y agregamos los Types de Cloudflare, listo, vamos a ponerle una coma, y listo, eso es como una cosita más, que había agregado en la configuración, qué más hizo, luego hizo alguna modificación en el angular.json, vamos a ver qué hizo en el angular.json, qué cambió, qué es lo que de pronto va a ser diferente, básicamente él hizo un cambio que es que este dist, normalmente cuando nosotros creamos una aplicación en angular, él crea como un subfolder y luego pues crea el Building o todo el Output en este dist, sin embargo si lo vemos en nuestra aplicación en angular, este dist básicamente tiene un Subpad que es Store, básicamente lo que hizo en la configuración de Cloudflare es que no tenía dist y ya, en mi caso si lo voy a dejar, me parece bueno, y de por sí si tienes más proyectos de angular en el mismo proyecto, porque angular se puede manejar como un monorepositorio de librerías, de proyectos, entonces a mí sí me parece bueno dejarlo, no hay problema con eso, pero algo que sí vas a agregar es este archivo, este archivo no lo teníamos y es nuevo y está dentro de los assets, entonces aquí dentro de los assets vamos a agregar ese archivo y listo, ahí lo agregamos y no hay nada más, realmente no hay nada más aquí en el archivo angular.json, pero listo, este archivo Routes de dónde sale, pues precisamente él nos genera este archivo que es una forma de decir cómo hacer Routing y una configuración sencilla dentro de Cloudflare, entonces vamos a literalmente copiar ese archivo y lo dejamos aquí, en el CRS de la aplicación, entonces listo, ahí está, lo dejamos dentro del CRS, ¿qué más hizo? al final también hizo una configuración en el appconfig, vamos a ver qué hizo en el appconfig, vamos a ir aquí a la aplicación base, que tiene la buena configuración para desplegar en Cloudflare, utilizando el Edge, acá está appconfig, básicamente lo que él tiene es que utilicemos providers, con with client, es básicamente lo que él nos sugiere aquí, y eso es como un requerimiento para que pueda utilizar o para que angular funcione bien desde la nube de Cloudflare, y realmente esto ya lo habíamos hecho, porque ya era una buena práctica que habíamos hecho al momento de habilitar Server Side Rendering, entonces solo voy a checar que si la tengamos, ahí está, provider http client con fetch, básicamente esto es la forma de habilitar que cuando se hagan peticiones, como pues las de una API, pues se haga mediante la función nativa de fetch que puede correr en un entorno de JavaScript, entonces pues eso ya lo tenemos, qué más tenemos por acá, vamos a ver acá el package, hizo la instalación, agregó unas cosas en el github node, vamos a ver qué agregó en el github node, creo que son los archivos, estos archivos de groundler y dev.buzz, esos son los dos, que normalmente cuando hacemos construcciones, va a crear como estos folders, y estos son para variables de entorno, entonces pues simplemente también lo vamos a agregar, para que tengamos esa configuración, entonces lo agregamos, vamos a ver qué más hizo, acá dice la compatibilidad, bueno esto es lo de la compatibilidad que ya pusimos de por sí en el ts, y luego vamos a ver que aquí precisamente esa compatibilidad, que es como la fecha actual, en donde lo va a ejecutar y va a añadir como unos scripts, en el package.json, para poderlo correr, ahora vamos a ver cuáles son esos scripts en el package.json, y fíjate que al start como que lo cambio un poquito, y además de eso también el deploy, nos deja un comando para hacer deploy, otro comando para hacer process, y un comando pues para hacer la, pues el despliegue de server, server rendering, entonces vamos a verlo, pero fíjate que también hay una carpetina, que dice tools, que tiene como una serie de procesos, para como copiar y pegar y configurar nuestra aplicación en cloudflare, entonces vamos a copiar esa carpeta de tools, y la vamos a llevar, creo que está al nivel de, si está al mismo nivel de ser ese, entonces lo vamos a dejar por acá, listo, tenemos tools, y aplicar esos comandos que están en script, realmente el start yo quiero dejarlo como el start nativo, y de pronto hacer, y de pronto hacerle un start específico, para cuando yo quiero, pues tener mi entorno de desarrollo, pero con cloudflare, entonces aquí si me va a copiar este comando, pero voy a ver, que en el build ellos agregan un npm run process, y process es este comando de acá, este comando si me lo voy a copiar, este process, me lo voy a copiar tal cual, entonces vamos a llevar este process, ahí está, process no lo llevamos a nuestra aplicación, luego si le vamos a agregar, a que cuando hagamos ng build, justo después de hacer ng build, corra el process, y vamos a probar, vamos a probar que funciona hasta ahí nuestra aplicación, entonces, por acá tengo un error raro, creo que al instalar las dependencias, por ahí algo salió, librería, creo que algo con, mi entorno de mini, mini flare, voy a reinstalar, a ver que está pasando allí, o instalar, podríamos instalar directamente, la versión, porque creo que acá están trabajando con versiones como beta, por ejemplo esta de next, entonces le voy a pedir directamente como esas versiones, o sea como que instale esas versiones, no sé si lo alcanzo a agregar aquí al, al package.json, o simplemente no lo instaló, acá vemos el render, no veo el mini flare, creo que el mini flare no lo agregó, y vamos a ver, algo que podríamos remover ya es express, literalmente lo podríamos remover, pero creo que no, creo que no agregó la de mini, entonces voy a ejecutar esto, y le voy a decir que, por favor agregue este, esta versión, y vamos a ver si así funciona, a ver si con esa versión de next, es donde, la versión next, es la versión siguiente que están preparando, pues funciona y me hace la instalación sin problema, vamos a ver que no tengamos ningún problema, al correr la instalación, listo, aquí literalmente ya no tuvimos ningún error, entonces significa que sí, que era simplemente la versión, aquí ya tenemos entonces esa versión específica, algo que podemos hacer es ya quitar, literalmente podríamos quitar express como dependencia, porque ya no es necesaria, porque ya no vamos a hacer el renderizado con express, sino con la tecnología de cloudflare, entonces literalmente también podríamos, remover express de aquí, listo, y creo que en su punto hasta podemos remover el angular, ccr, creo que en su punto lo podemos hacer, no significa que vayamos a quitar el server, es lo que ya no es necesario, pero vamos a ver, y listo vamos a ejecutar, hagamos una cosa, hagamos un ng build, o un npm run build, eso debería ejecutar el builder de angular, y el npm run process que estamos agregando, para que haga como cierta configuración, este process básicamente lo que va a dejar es como una, copiar y pegar ciertos archivos, en un entorno específico, que precisamente creo que es el que no está encontrando, déjame ver, dice que no encontró, no encontró el archivo, website browser, vamos a ver porque no lo encontró, si debió ejecutar es el ng build, es precisamente por el archivito, fíjate que lo deja, o sea el ng build lo hizo bien, acá dejó el browser, y dejó los archivos del browser, y los archivos del server, pero aquí, él esperaba hacer el copiar y pegar, y encontrar directamente, en el disk, como pues, las aplicaciones, pero recuerda que, nosotros si dejamos el store, entonces simplemente lo va a agregar aquí el store, cosa que de pronto pues, si lo hubiéramos quitado, pues hubiera funcionado, pero de nuevo, creo que el store está bien, entonces simplemente lo voy a dejar, y por acá, él va a crear una ruta en específica, entonces a este también le voy a poner, store, para que, simplemente lo deje, por ahí, listo, entonces vamos a volver a correr el proceso, ng build, el ng build debe generar sin problema, en la subcarpeta store, y luego en el primer run process, va a básicamente copiar y pegar ciertas cosas, y configurarlas, fíjate que ahí, literalmente lo hizo, corrió esto, y qué es lo que hace, ng build como tal, lo que hace es generarme la carpeta de browser, y server, y ese process con esos archivitos, que básicamente lo que hace es, mover ciertos archivos, sobre escribir algunos, lo que hace es crear una carpeta, como en el mismo nivel de browser y server, que se llama cloudflare, casi que es la unión de los dos, porque como nosotros vamos a desplegar esto en cloudflare pages, cloudflare pages tiene la habilidad, de como que, re-indirizar los dos al tiempo, digámoslo de alguna manera, pero con una configuración especial, cuál es esa configuración especial, básicamente, la configuración especial es, que todos los archivos, del browser, deben estar en el primer nivel, aquí vemos nuestro index html, estos son los del primer nivel, y todo lo que sea del lado del servidor, debe ir en una como subcarpeta, que se llama worker, literalmente todo lo que es worker, es casi lo que vemos en el archivo, o en el subfolder, entonces básicamente que hizo, crear cloudflare, con todos los archivos del browser, y una subcarpeta, que se llama worker.js, en donde están los archivos, o en la carpetita de server, y normalmente en server, teníamos un archivo que se llama, server.mjs, aquí lo renombró, a index.js, pero es básicamente el mismo archivo, solo que por configuración, cloudflare necesita, encontrar una carpeta llamada, guion bajo cloudflare.js, y ahí encontrar un index.js, es más una cuestión de configuración, de como cloudflare espera encontrar, este tipo de archivos, dentro de su propia nube, entonces listo, esa parte está bien, entonces vamos a ver, que más necesitamos, aquí estos comandos, ya es como, ok, este no cambio, por ejemplo, esto es desplegar nuestra aplicación, pero aquí si empieza, a utilizar un entorno, por ejemplo de cloudflare page, dev, para correr como un entorno, de emulación, utilizando edge computing, bien, entonces vamos a ejecutar, ese comando, solo que voy a crearle, su propio comando, y fíjate que acá lo hace, o sea primero corre el build, o sea literalmente, si voy a copiar ese start, pero ese start, lo voy a, cambiar, o sea no va a ser, nuestro ng serve, va a ser como un, este casi es un producción, realmente, o sea, porque literalmente hace un build, y el build, pues copia algo de producción, entonces voy a ponerle start prod, start prod, ok, start prod, vamos a ponerle, entonces hace un build, luego ejecuta render, y aquí necesitaríamos decir, que esto está en store, al final esto quedó dentro de store, y listo, y ahí deberíamos, ver que funciona, entonces vamos a correr a este comando, entonces vamos a decir, npm run, start prod, si, si, si, start prod, entonces fíjate que aquí, esto ya es un entorno, en el cual, estaría utilizando angular, server side rendering, y la tecnología de cloudflare, en el edge, y si funciona aquí, básicamente, va a funcionar dentro de la nube, de cloudflare, es una, como un local de su propia tecnología, entonces vamos a ver que corra, y listo, entonces fíjate que acá, él nos creó como un puerto, en el cual, podemos como empezar a debuguear, cómo correría esta tecnología, en el edge computing de cloudflare, y aquí ya deberíamos empezar a ver, que esto hace server side rendering, y efectivamente aquí, hace server side rendering, aquí ya encontramos, el contenido está renderizando, los productos, sin ningún problema, es decir, ya hace server side rendering, solo que en un entorno local, ahora simplemente, necesitamos llevarlo a producción, ¿cómo lo llevamos a producción?, básicamente, ya en un video anterior, había explicado cómo configurar cloudflare, con github, entonces, simplemente nos tocaría hacer, un commit, y ya automáticamente, se haría deployment, lo único que necesitamos hacer, es de nuevo, que esta configuración, que acabo de hacer, pues sea la adecuada, entonces básicamente, ¿qué hicimos?, de nuevo, cambiamos el archivo server.js, el server.tis, por el que nos sugería cloudflare, en el setup como tal, instalamos un par de dependencias, para que funcione, pues para que podamos correrlo, glander, todo este tipo de cosas, también hicimos un par de configuraciones, aquí en este archivo de roads.json, luego copiamos y pegamos, como estas tools, que lo que hacen es como copiar, y pegar ciertos archivos, como mover, y dejarlo en una configuración, y si ya nuestra aplicación, tiene esa configuración, debería desplegarse, sin mayor inconveniente, entonces vamos a hacer un commit, vamos a ver, salvar, ah, git add, git commit, vamos a ponerlo, y aquí lo que voy a hacer, es una configuración que es, enable, server.tis rendering, in cloudflare, pages, listo, vamos a, poner esa rama, y vamos a ver el pull request, e integrarlo, en el repositorio en el cual estoy trabajando, entonces vamos a ver, este repositorio, acá es, enable server.tis rendering, vamos a, crearlo, y realmente este pull request, es un poquito grande, porque, pues aquí estoy haciendo, aquí mismo habilité a server.tis rendering, y también hice las configuraciones, para que funcionara cloudflare pages, entonces hay bastante como código, aquí, pues el server, esta pues la configuración que hicimos, para que funcione, server.tis rendering, etcétera, entonces, esto es lo que deberíamos llevar a producción, voy a hacerle un merge acá, y, si le hacemos merge, y el despliegue e integración continua, funciona, aquí deberíamos ver, como esto despliega, hacia, aunque aquí, vamos a ver si esta desplegando, de forma correcta, porque debería desplegar, hacia, pues la aplicación, como tal, listo, entonces si nosotros vamos y miramos nuestro dashboard, aquí vamos a ver, si ya se hizo la, el deployment, de por si aquí, dice que hace pocos segundos, vamos a mirar los detalles, aquí, básicamente vemos, cuales son los assets, y podemos ver el proceso y las variables de entorno, o también, como yo ya tengo configurado, esto con, Jifad actions, déjenme en los comentarios, si quieren ver la configuración con Jifad actions, pero acá básicamente, simplemente se hace el build, de la aplicación, nuestro NPM run build, y al final recordemos que ese, build lo que hace es correr, el ng build y NPM run process, y luego lo despliega, lo despliega hacia cloudflare, así que pues simplemente hizo el despliegue, como literalmente lo veníamos haciendo en local, si esto funcionó bien, pues aquí ya deberíamos tener nuestra aplicación en producción, con server server rendering, y pues utilizando cloudflare pages, sin embargo aquí, vamos a ver, si dice un minuto atrás, entonces vamos a ver si ya, la aplicación, es más recuerden que esta aplicación, no tenía server server rendering, aquí no estaba renderizando nada, entonces vamos a cargarla de nuevo, vamos a ver si todo funciona, vamos a recargar acá, y ver que ahora ya tiene contenido, esta aplicación ya tiene server server rendering, en angular, y utilizando la tecla, es la tecnología de edge computing, ya realmente está renderizando contenido, acá está todo, vamos a ver el detalle de un producto, entonces vamos a ir acá, voy a darle ver código fuente, y aquí podemos ver literalmente, que está el contenido, están los detalles, del producto, por acá vemos como tenemos varios, agregar al carrito, déjame ver, acá voy a renderizar, porque no deberíamos tener tantos, agregar al carrito, deberíamos tener solo, un agregar al carrito, vamos a ver aquí, vamos a ver, aquí parece que si se está como, renderizando la, como que solo hizo rendering, de la aplicación, de la ruta primaria, o sea de la ruta home, pero no de las subpáginas, esto es bastante interesante, porque realmente, parece que no renderizó la, si aquí de por si, por acá debe estar, our products, bueno our products, creo que también lo tenemos acá, ah no, acá no, parece que listo, que lo que hizo fue, el renderizado, solo hizo el, como que el server, el server rendering, de la página principal, pero cuando ya uno, va al detalle de un producto, al parecer, no hizo el server, el server rendering, de, un detalle, o sea como que, el detalle de un producto, lo sigue dejando, como si fuera la ruta principal, veamos como, como podríamos solucionar esto, ah, ya encontré mi error, ya encontré mi error, y es que aquí en mi comando, de deployment, hacia cloudflare, en donde ya estoy utilizando, github pages, literalmente, estoy haciendo, el despliegue, pero solo de, el archivo de browser, realmente aquí debería cambiar esto, y decirle que quiero desplegar, recordemos que le genera una carpeta, que se llama, cloudflare, esa es la que debo desplegar, entonces ahí, ahí está mi error, entonces lo que debo desplegar, es cloudflare, el cual tiene la estructura, con el worker, bueno con todo ahí, entonces simplemente, eso lo despliego a cloudflare, y con eso debería funcionar, entonces vamos a hacer un commit, aquí lo malo es que, realmente este action, solo se despliega, si hay un cambio dentro de, el archivo, o dentro de mi carpeta website, porque es un mono repositorio, entonces vamos a hacer, cualquier cosita aquí, como de cambio, para que, pues él lo pueda hacer, también puedo, como forzarlo, pero nada, por ahora simplemente, podría, ir por acá, y, por ejemplo este spam, está feito, pues dice otra cosa, de por si aquí podría cambiar esto, a que ya no vaya, a esta URL, sino que vaya a, nicobites, punto extract, digamos que ese va a ser mi cambio, listo, voy a hacer el commit, fix files, vamos a hacerlo, y vamos a volver a ver, y ver si todo funciona, de la forma adecuada, recuerda que si tú estás haciendo, o tú estás utilizando, la integración de Cloud4Pages, automática con GIF App Pages, aquí tengo un GIF AddAction, que hace como, manualmente ese deployment, pero me da un poco más de ventaja, de yo manipularlo, de yo manejarlo, pero si estás haciendo, la integración automática, simplemente tienes que ir allá, a tu configuración, y ajustar tu carpeta, ya no deberías distribuir, la aplicación browser, sino en este momento, deberías distribuir, la aplicación, this, slash store, slash Cloud4, entonces por acá, ya deberíamos, ver este ajuste, acá se está haciendo el deployment, del website, entonces vamos a ver, si todo funciona bien, acá, pues ya está haciendo, y corriendo, el GIF AddActions, está instalando dependencias, luego va a ser, el build y desplegar, y creo que con esto, ya debería funcionar, de forma correcta, nuestra aplicación, en Cloud4, con Angular, y Server Side Rendering, listo, entonces volvamos a verlo, aquí nuestra aplicación, se está renderizando, veamos el código fuente, si aquí tenemos, precisamente ya, todos los productos, y acá estamos renderizando, la página del home, entonces aquí ya tenemos, el Server Side Rendering, del home, todo bien, vamos a ir a un detalle, de un producto, ahí está, y vamos a ver, inspeccionar código fuente, y efectivamente, solo tenemos el Server Side Rendering, de ese producto, en específico, acá vemos precisamente, vale 44 dólares, entonces acá tenemos, 44 dólares, perfecto, vamos a hacerlo, con otro producto, porque entonces, eso significa, que está haciendo, Server Side Rendering, de cada una de las rutas, de forma dinámica, pero al final, así sea de forma dinámica, ya se está generando, el renderizado, al lado del servidor, entonces vamos a ver por acá, acá, este cuánto cuesta, 69, y por acá, debería estar nuestro precio, 69, perfecto, ya entonces logramos, tener una aplicación, que es Server Side Rendering, con Cloudflare Pages, y bien, eso ha sido todo por hoy, realmente, sé que puede ser un poco engorroso, como todos estos archivos, y configuraciones, pero algo que nos permite, Cloudflare Pages, es de forma muy fácil, literalmente desplegar, y también, tener Server Side Rendering, de una aplicación en Angular, a muy, muy bajo costo, realmente, es más, literalmente, si ustedes escogen, el plan gratuito, y no utilizan APIs, de Inteligencia Artificial, de Cloudflare, ni nada de eso, sino solo la capa de hosting, y desplegar, literalmente, la aplicación, les cuesta cero, les cuesta cero dinero, desplegar en Cloudflare, no tienen que pagar, nada de servidores de Note, nada, y hay server side rendering, que es, que es, que hay server side rendering, es decir, no es que, tengamos un, una desventaja, de por si tenemos una ventaja más, tenemos, menos latencia, tenemos un entorno, casi gratuito, para desplegar nuestros proyectos, sean de server side rendering, o sean single page application, y un entorno muy sencillo, sé que, puede parecer un poco rara, la configuración, todos los archivos, que tuvimos que mover, pero, realmente vale la pena, y, pero recuerda, si también tienes, otro entorno, tu entorno o tu stack de tecnologías es pues un poco más tradicional o no tradicional sino pues el convencional el que tenemos casi en la mayoría de empresas que es una instancia de Node así como en las APIs tenemos una instancia de Node que se conecta a la base de datos pues aquí también tú podrías simplemente utilizar ya la configuración que tenías al habilitar servers de rendering que es una aplicación de Node con Express y renderizarla en cualquier instancia que tenga Node. En Cloud4Pages no tenemos Node, tenemos un entorno más chiquito pero precisamente por ser más chiquito se puede correr en el CDN de Cloud4 con Edge Computing y precisamente tener estos beneficios de latencia y cero costo y realmente es una nube bastante interesante así que déjenme en los comentarios qué les pareció este video si les parece útil, si les pareció útil si realmente no quieren este Sarsady pues lo compilan y tampoco es que un servidor de Heroku sea muy caro, son 5 dólares, 7 dólares al mes entonces tampoco es que sea tan grande pero me parece que para proyectos personales o es más para proyectos de empresas que están desplegando muchos sitios que uno para un proyecto personal pues ok, 5 dólares 0 dólares, está bien pero realmente para, imagínate que tú estás trabajando para una agencia, para una consultoría que están manteniendo muchos sitios y cada servidor les está costando cierto y si uno ya empieza a sumar 5 o 10 dólares por cada servidor dentro de todo el portafolio de clientes que tenga una empresa, pues va sumando, va sumando bastante, entonces pues literalmente tienen una nube casi gratuita, utilizando Edge Computing y con esta tecnología y habilitando Server Server Rendering, recordemos que Server Server Rendering beneficia en el SEO y también beneficia en la carga del sitio, y de por sí gracias a esto vamos a poder habilitar otras características que les voy a mostrar en un video aparte con por ejemplo el Open Graph para tener como estos links que se pueden compartir por redes sociales y generan como una previsualización, eso solo se puede hacer si tienes Server Server Rendering y como ya tenemos Server Server Rendering en Angular pues entonces podemos ya hacer ese tipo de features en específico y bueno, todas las características y ventajas ya tomarlas pues básicamente aprovechar todas estas ventajas aplicando Server Server Rendering y teniéndolo en Cloud4Pages puede ser un poquito engorrosa la configuración, vale la pena, de por sí estoy trabajando en un proyecto personal de pronto para para hacer esta configuración menos engorrosa, pero pues luego se los comento así que suscríbanse, compartanlo dejen en los comentarios, déjenme saber si sabían de CloudFlyer, si sabían de estas tecnologías, o si simplemente desplegaron su aplicación de Angular con Server Server Rendering en una estancia de Node normal, así que déjenme en los comentarios déjenme también saber si quieren verlo en otras nubes más convencionales como Amazon, como Heroku, etc. Recuerda que ya no te sirve, si quieres hacer Server Server Rendering ya no te sirve solo archivos estáticos, un S3 un Cloud4Pages solo con los archivos estáticos ahora sí necesitas una instancia del servidor o algo que corra JavaScript desde el lado del servidor y Cloud4Pages con esta configuración es una gran opción, así que nos vemos en la siguiente, hasta la próxima espero les haya gustado bastante